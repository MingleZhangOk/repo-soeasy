import { faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';
import { FaIconComponent } from '@fortawesome/angular-fontawesome';
import { HttpClient } from '@angular/common/http';
import { NG_VALIDATORS, FormsModule } from '@angular/forms';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import { NgbActiveModal, NgbModal, NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { __assign, __values, __extends, __spread } from 'tslib';
import { TranslateService, TranslateModule, TranslateLoader, MissingTranslationHandler } from '@ngx-translate/core';
import { CommonModule, DatePipe } from '@angular/common';
import { Observable } from 'rxjs';
import { filter, share } from 'rxjs/operators';
import { Injectable, Component, Input, Directive, forwardRef, EventEmitter, Output, Pipe, ContentChild, Host, HostListener, ElementRef, Sanitizer, SecurityContext, defineInjectable, inject, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiModuleConfig = /** @class */ (function () {
    function JhiModuleConfig() {
        this.sortIcon = faSort;
        this.sortAscIcon = faSortUp;
        this.sortDescIcon = faSortDown;
        this.i18nEnabled = false;
        this.defaultI18nLang = 'en';
        this.noi18nMessage = 'translation-not-found';
        this.alertAsToast = false;
        this.alertTimeout = 5000;
        this.classBadgeTrue = 'badge badge-success';
        this.classBadgeFalse = 'badge badge-danger';
        this.classTrue = 'fa fa-lg fa-check text-success';
        this.classFalse = 'fa fa-lg fa-times text-danger';
    }
    JhiModuleConfig.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ JhiModuleConfig.ngInjectableDef = defineInjectable({ factory: function JhiModuleConfig_Factory() { return new JhiModuleConfig(); }, token: JhiModuleConfig, providedIn: "root" });
    return JhiModuleConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiConfigService = /** @class */ (function () {
    function JhiConfigService(moduleConfig) {
        this.CONFIG_OPTIONS = __assign({}, new JhiModuleConfig(), moduleConfig);
    }
    /**
     * @return {?}
     */
    JhiConfigService.prototype.getConfig = /**
     * @return {?}
     */
    function () {
        return this.CONFIG_OPTIONS;
    };
    JhiConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiConfigService.ctorParameters = function () { return [
        { type: JhiModuleConfig }
    ]; };
    /** @nocollapse */ JhiConfigService.ngInjectableDef = defineInjectable({ factory: function JhiConfigService_Factory() { return new JhiConfigService(inject(JhiModuleConfig)); }, token: JhiConfigService, providedIn: "root" });
    return JhiConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A component that will take care of item count statistics of a pagination.
 */
var JhiItemCountComponent = /** @class */ (function () {
    function JhiItemCountComponent(config) {
        this.i18nEnabled = config.CONFIG_OPTIONS.i18nEnabled;
    }
    /**
     * "translate-values" JSON of the template
     */
    /**
     * "translate-values" JSON of the template
     * @return {?}
     */
    JhiItemCountComponent.prototype.i18nValues = /**
     * "translate-values" JSON of the template
     * @return {?}
     */
    function () {
        /** @type {?} */
        var first = (this.page - 1) * this.itemsPerPage === 0 ? 1 : (this.page - 1) * this.itemsPerPage + 1;
        /** @type {?} */
        var second = this.page * this.itemsPerPage < this.total ? this.page * this.itemsPerPage : this.total;
        return {
            first: first,
            second: second,
            total: this.total
        };
    };
    JhiItemCountComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-item-count',
                    template: "\n        <div *ngIf=\"i18nEnabled; else noI18n\" class=\"info jhi-item-count\" jhiTranslate=\"global.item-count\" [translateValues]=\"i18nValues()\">\n            /* [attr.translateValues] is used to get entire values in tests */\n        </div>\n        <ng-template #noI18n class=\"info jhi-item-count\">\n            Showing\n            {{ (page - 1) * itemsPerPage == 0 ? 1 : (page - 1) * itemsPerPage + 1 }}\n            - {{ page * itemsPerPage < total ? page * itemsPerPage : total }} of {{ total }} items.\n        </ng-template>\n    "
                }] }
    ];
    /** @nocollapse */
    JhiItemCountComponent.ctorParameters = function () { return [
        { type: JhiConfigService }
    ]; };
    JhiItemCountComponent.propDecorators = {
        page: [{ type: Input }],
        total: [{ type: Input }],
        itemsPerPage: [{ type: Input }]
    };
    return JhiItemCountComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This component can be used to display a boolean value by defining the \@Input attributes
 * If an attribute is not provided, default values will be applied (see JhiModuleConfig class)
 * Have a look at the following examples
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean [value]="inputBooleanVariable"></jhi-boolean>
 *
 * - Display a green check when inputBooleanVariable is true
 * - Display a red cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check text-primary"
 *     classFalse="fa fa-lg fa-times text-warning"
 * </jhi-boolean>
 *
 * - Display a blue check when inputBooleanVariable is true
 * - Display an orange cross when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable">
 *     classTrue="fa fa-lg fa-check"
 *     classFalse=""
 * </jhi-boolean>
 *
 * - Display a black check when inputBooleanVariable is true
 * - Do not display anything when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="inputBooleanVariable"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display a green badge when inputBooleanVariable is true
 * - Display a red badge when inputBooleanVariable is false
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * <jhi-boolean
 *     [value]="user.activated"
 *     classTrue="badge badge-warning"
 *     classFalse="badge badge-info"
 *     [textTrue]="'userManagement.activated' | translate"
 *     textFalse="deactivated">
 * </jhi-boolean>
 *
 * - Display an orange badge and write 'activated' when inputBooleanVariable is true
 * - Display a blue badge and write 'deactivated' when inputBooleanVariable is false
 */
var JhiBooleanComponent = /** @class */ (function () {
    function JhiBooleanComponent(configService) {
        this.config = configService.getConfig();
    }
    /**
     * @return {?}
     */
    JhiBooleanComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.textTrue === undefined) {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classTrue;
            }
        }
        else {
            if (this.classTrue === undefined) {
                this.classTrue = this.config.classBadgeTrue;
            }
        }
        if (this.textFalse === undefined) {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classFalse;
            }
        }
        else {
            if (this.classFalse === undefined) {
                this.classFalse = this.config.classBadgeFalse;
            }
        }
    };
    JhiBooleanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-boolean',
                    template: "\n        <span [ngClass]=\"value ? classTrue : classFalse\" [innerHtml]=\"value ? textTrue : textFalse\"> </span>\n    "
                }] }
    ];
    /** @nocollapse */
    JhiBooleanComponent.ctorParameters = function () { return [
        { type: JhiConfigService }
    ]; };
    JhiBooleanComponent.propDecorators = {
        value: [{ type: Input }],
        classTrue: [{ type: Input }],
        classFalse: [{ type: Input }],
        textTrue: [{ type: Input }],
        textFalse: [{ type: Input }]
    };
    return JhiBooleanComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
/**
 * @param {?} base64String
 * @return {?}
 */
function numberOfBytes(base64String) {
    return (base64String.length / 4) * 3 - paddingSize(base64String);
    /**
     * @param {?} suffix
     * @param {?} str
     * @return {?}
     */
    function endsWith(suffix, str) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function paddingSize(value) {
        if (endsWith('==', value)) {
            return 2;
        }
        if (endsWith('=', value)) {
            return 1;
        }
        return 0;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMaxbytesValidatorDirective = /** @class */ (function () {
    function JhiMaxbytesValidatorDirective() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    JhiMaxbytesValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return c.value && numberOfBytes(c.value) > this.jhiMaxbytes
            ? {
                maxbytes: {
                    valid: false
                }
            }
            : null;
    };
    JhiMaxbytesValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiMaxbytes][ngModel]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(function () { return JhiMaxbytesValidatorDirective; }), multi: true }]
                },] }
    ];
    /** @nocollapse */
    JhiMaxbytesValidatorDirective.ctorParameters = function () { return []; };
    JhiMaxbytesValidatorDirective.propDecorators = {
        jhiMaxbytes: [{ type: Input }]
    };
    return JhiMaxbytesValidatorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMinbytesValidatorDirective = /** @class */ (function () {
    function JhiMinbytesValidatorDirective() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    JhiMinbytesValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return c.value && numberOfBytes(c.value) < this.jhiMinbytes
            ? {
                minbytes: {
                    valid: false
                }
            }
            : null;
    };
    JhiMinbytesValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiMinbytes][ngModel]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(function () { return JhiMinbytesValidatorDirective; }), multi: true }]
                },] }
    ];
    /** @nocollapse */
    JhiMinbytesValidatorDirective.ctorParameters = function () { return []; };
    JhiMinbytesValidatorDirective.propDecorators = {
        jhiMinbytes: [{ type: Input }]
    };
    return JhiMinbytesValidatorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMaxValidatorDirective = /** @class */ (function () {
    function JhiMaxValidatorDirective() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    JhiMaxValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return c.value === undefined || c.value === null || c.value <= this.jhiMax
            ? null
            : {
                max: {
                    valid: false
                }
            };
    };
    JhiMaxValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiMax][ngModel]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(function () { return JhiMaxValidatorDirective; }), multi: true }]
                },] }
    ];
    /** @nocollapse */
    JhiMaxValidatorDirective.ctorParameters = function () { return []; };
    JhiMaxValidatorDirective.propDecorators = {
        jhiMax: [{ type: Input }]
    };
    return JhiMaxValidatorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMinValidatorDirective = /** @class */ (function () {
    function JhiMinValidatorDirective() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    JhiMinValidatorDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return c.value === undefined || c.value === null || c.value >= this.jhiMin
            ? null
            : {
                min: {
                    valid: false
                }
            };
    };
    JhiMinValidatorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiMin][ngModel]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: forwardRef(function () { return JhiMinValidatorDirective; }), multi: true }]
                },] }
    ];
    /** @nocollapse */
    JhiMinValidatorDirective.ctorParameters = function () { return []; };
    JhiMinValidatorDirective.propDecorators = {
        jhiMin: [{ type: Input }]
    };
    return JhiMinValidatorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiSortDirective = /** @class */ (function () {
    function JhiSortDirective() {
        this.predicateChange = new EventEmitter();
        this.ascendingChange = new EventEmitter();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    JhiSortDirective.prototype.sort = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.ascending = field !== this.predicate ? true : !this.ascending;
        this.predicate = field;
        this.predicateChange.emit(field);
        this.ascendingChange.emit(this.ascending);
        this.callback();
    };
    JhiSortDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiSort]'
                },] }
    ];
    /** @nocollapse */
    JhiSortDirective.ctorParameters = function () { return []; };
    JhiSortDirective.propDecorators = {
        predicate: [{ type: Input }],
        ascending: [{ type: Input }],
        callback: [{ type: Input }],
        predicateChange: [{ type: Output }],
        ascendingChange: [{ type: Output }]
    };
    return JhiSortDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiSortByDirective = /** @class */ (function () {
    function JhiSortByDirective(jhiSort, configService) {
        this.jhiSort = jhiSort;
        this.jhiSort = jhiSort;
        /** @type {?} */
        var config = configService.getConfig();
        this.sortIcon = config.sortIcon;
        this.sortAscIcon = config.sortAscIcon;
        this.sortDescIcon = config.sortDescIcon;
    }
    /**
     * @return {?}
     */
    JhiSortByDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (this.jhiSort.predicate && this.jhiSort.predicate !== '_score' && this.jhiSort.predicate === this.jhiSortBy) {
            this.updateIconDefinition(this.iconComponent, this.jhiSort.ascending ? this.sortDescIcon : this.sortAscIcon);
            this.jhiSort.activeIconComponent = this.iconComponent;
        }
    };
    /**
     * @return {?}
     */
    JhiSortByDirective.prototype.onClick = /**
     * @return {?}
     */
    function () {
        if (this.jhiSort.predicate && this.jhiSort.predicate !== '_score') {
            this.jhiSort.sort(this.jhiSortBy);
            this.updateIconDefinition(this.jhiSort.activeIconComponent, this.sortIcon);
            this.updateIconDefinition(this.iconComponent, this.jhiSort.ascending ? this.sortDescIcon : this.sortAscIcon);
            this.jhiSort.activeIconComponent = this.iconComponent;
        }
    };
    /**
     * @private
     * @param {?} iconComponent
     * @param {?} icon
     * @return {?}
     */
    JhiSortByDirective.prototype.updateIconDefinition = /**
     * @private
     * @param {?} iconComponent
     * @param {?} icon
     * @return {?}
     */
    function (iconComponent, icon) {
        if (iconComponent) {
            iconComponent.iconProp = icon;
            iconComponent.ngOnChanges({});
        }
    };
    JhiSortByDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiSortBy]'
                },] }
    ];
    /** @nocollapse */
    JhiSortByDirective.ctorParameters = function () { return [
        { type: JhiSortDirective, decorators: [{ type: Host }] },
        { type: JhiConfigService }
    ]; };
    JhiSortByDirective.propDecorators = {
        jhiSortBy: [{ type: Input }],
        iconComponent: [{ type: ContentChild, args: [FaIconComponent,] }],
        onClick: [{ type: HostListener, args: ['click',] }]
    };
    return JhiSortByDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiLanguageService = /** @class */ (function () {
    function JhiLanguageService(translateService, configService) {
        this.translateService = translateService;
        this.configService = configService;
        this.currentLang = 'en';
        this.init();
    }
    /**
     * @return {?}
     */
    JhiLanguageService.prototype.init = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var config = this.configService.getConfig();
        this.currentLang = config.defaultI18nLang;
        this.translateService.setDefaultLang(this.currentLang);
        this.translateService.use(this.currentLang);
    };
    /**
     * @param {?} languageKey
     * @return {?}
     */
    JhiLanguageService.prototype.changeLanguage = /**
     * @param {?} languageKey
     * @return {?}
     */
    function (languageKey) {
        this.currentLang = languageKey;
        this.configService.CONFIG_OPTIONS.defaultI18nLang = languageKey;
        this.translateService.use(this.currentLang);
    };
    /**
     * @return {?}
     */
    JhiLanguageService.prototype.getCurrent = /**
     * @return {?}
     */
    function () {
        return Promise.resolve(this.currentLang);
    };
    JhiLanguageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiLanguageService.ctorParameters = function () { return [
        { type: TranslateService },
        { type: JhiConfigService }
    ]; };
    /** @nocollapse */ JhiLanguageService.ngInjectableDef = defineInjectable({ factory: function JhiLanguageService_Factory() { return new JhiLanguageService(inject(TranslateService), inject(JhiConfigService)); }, token: JhiLanguageService, providedIn: "root" });
    return JhiLanguageService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A wrapper directive on top of the translate pipe as the inbuilt translate directive from ngx-translate is too verbose and buggy
 */
var JhiTranslateDirective = /** @class */ (function () {
    function JhiTranslateDirective(configService, el, translateService) {
        this.configService = configService;
        this.el = el;
        this.translateService = translateService;
    }
    /**
     * @return {?}
     */
    JhiTranslateDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var enabled = this.configService.getConfig().i18nEnabled;
        if (enabled) {
            this.translateService.onLangChange.subscribe(function () {
                _this.getTranslation();
            });
        }
    };
    /**
     * @return {?}
     */
    JhiTranslateDirective.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enabled = this.configService.getConfig().i18nEnabled;
        if (enabled) {
            this.getTranslation();
        }
    };
    /**
     * @private
     * @return {?}
     */
    JhiTranslateDirective.prototype.getTranslation = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.translateService.get(this.jhiTranslate, this.translateValues).subscribe(function (value) {
            _this.el.nativeElement.innerHTML = value;
        }, function () {
            return _this.configService.getConfig().noi18nMessage + "[" + _this.jhiTranslate + "]";
        });
    };
    JhiTranslateDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[jhiTranslate]'
                },] }
    ];
    /** @nocollapse */
    JhiTranslateDirective.ctorParameters = function () { return [
        { type: JhiConfigService },
        { type: ElementRef },
        { type: TranslateService }
    ]; };
    JhiTranslateDirective.propDecorators = {
        jhiTranslate: [{ type: Input }],
        translateValues: [{ type: Input }]
    };
    return JhiTranslateDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMissingTranslationHandler = /** @class */ (function () {
    function JhiMissingTranslationHandler(configService) {
        this.configService = configService;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    JhiMissingTranslationHandler.prototype.handle = /**
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var key = params.key;
        return this.configService.getConfig().noi18nMessage + "[" + key + "]";
    };
    return JhiMissingTranslationHandler;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiThreadModalComponent = /** @class */ (function () {
    function JhiThreadModalComponent(activeModal) {
        this.activeModal = activeModal;
        this.threadDumpAll = 0;
        this.threadDumpBlocked = 0;
        this.threadDumpRunnable = 0;
        this.threadDumpTimedWaiting = 0;
        this.threadDumpWaiting = 0;
    }
    /**
     * @return {?}
     */
    JhiThreadModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.threadDump.forEach(function (value) {
            if (value.threadState === 'RUNNABLE') {
                _this.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                _this.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                _this.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                _this.threadDumpBlocked += 1;
            }
        });
        this.threadDumpAll = this.threadDumpRunnable + this.threadDumpWaiting + this.threadDumpTimedWaiting + this.threadDumpBlocked;
    };
    /**
     * @param {?} threadState
     * @return {?}
     */
    JhiThreadModalComponent.prototype.getBadgeClass = /**
     * @param {?} threadState
     * @return {?}
     */
    function (threadState) {
        if (threadState === 'RUNNABLE') {
            return 'badge-success';
        }
        else if (threadState === 'WAITING') {
            return 'badge-info';
        }
        else if (threadState === 'TIMED_WAITING') {
            return 'badge-warning';
        }
        else if (threadState === 'BLOCKED') {
            return 'badge-danger';
        }
    };
    JhiThreadModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-thread-modal',
                    template: "\n        <div class=\"modal-header\">\n            <h4 class=\"modal-title\" jhiTranslate=\"metrics.jvm.threads.dump.title\">Threads dump</h4>\n            <button type=\"button\" class=\"close\" (click)=\"activeModal.dismiss('closed')\">&times;</button>\n        </div>\n        <div class=\"modal-body\">\n            <span class=\"badge badge-primary\" (click)=\"threadDumpFilter = {}\">\n                All&nbsp;<span class=\"badge badge-pill badge-default\">{{ threadDumpAll }}</span> </span\n            >&nbsp;\n            <span class=\"badge badge-success\" (click)=\"threadDumpFilter = { threadState: 'RUNNABLE' }\">\n                Runnable&nbsp;<span class=\"badge badge-pill badge-default\">{{ threadDumpRunnable }}</span> </span\n            >&nbsp;\n            <span class=\"badge badge-info\" (click)=\"threadDumpFilter = { threadState: 'WAITING' }\"\n                >Waiting&nbsp;<span class=\"badge badge-pill badge-default\">{{ threadDumpWaiting }}</span></span\n            >&nbsp;\n            <span class=\"badge badge-warning\" (click)=\"threadDumpFilter = { threadState: 'TIMED_WAITING' }\">\n                Timed Waiting&nbsp;<span class=\"badge badge-pill badge-default\">{{ threadDumpTimedWaiting }}</span> </span\n            >&nbsp;\n            <span class=\"badge badge-danger\" (click)=\"threadDumpFilter = { threadState: 'BLOCKED' }\"\n                >Blocked&nbsp;<span class=\"badge badge-pill badge-default\">{{ threadDumpBlocked }}</span></span\n            >&nbsp;\n            <div class=\"mt-2\">&nbsp;</div>\n            Filter\n            <input type=\"text\" [(ngModel)]=\"threadDumpFilter\" class=\"form-control\" />\n            <div class=\"pad\" *ngFor=\"let entry of (threadDump | pureFilter: threadDumpFilter:'lockName' | keys)\">\n                <h6>\n                    <span class=\"badge\" [ngClass]=\"getBadgeClass(entry.value.threadState)\">{{ entry.value.threadState }}</span\n                    >&nbsp;{{ entry.value.threadName }}\n                    (ID\n                    {{ entry.value.threadId }})\n                    <a (click)=\"entry.show = !entry.show\" href=\"javascript:void(0);\">\n                        <span [hidden]=\"entry.show\" jhiTranslate=\"metrics.jvm.threads.dump.show\">Show StackTrace</span>\n                        <span [hidden]=\"!entry.show\" jhiTranslate=\"metrics.jvm.threads.dump.hide\">Hide StackTrace</span>\n                    </a>\n                </h6>\n                <div class=\"card\" [hidden]=\"!entry.show\">\n                    <div class=\"card-body\">\n                        <div *ngFor=\"let st of (entry.value.stackTrace | keys)\" class=\"break\">\n                            <samp\n                                >{{ st.value.className }}.{{ st.value.methodName }}(<code\n                                    >{{ st.value.fileName }}:{{ st.value.lineNumber }}</code\n                                >)</samp\n                            >\n                            <span class=\"mt-1\"></span>\n                        </div>\n                    </div>\n                </div>\n                <table class=\"table table-sm table-responsive\">\n                    <thead>\n                        <tr>\n                            <th jhiTranslate=\"metrics.jvm.threads.dump.blockedtime\">Blocked Time</th>\n                            <th jhiTranslate=\"metrics.jvm.threads.dump.blockedcount\">Blocked Count</th>\n                            <th jhiTranslate=\"metrics.jvm.threads.dump.waitedtime\">Waited Time</th>\n                            <th jhiTranslate=\"metrics.jvm.threads.dump.waitedcount\">Waited Count</th>\n                            <th jhiTranslate=\"metrics.jvm.threads.dump.lockname\">Lock Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>{{ entry.value.blockedTime }}</td>\n                            <td>{{ entry.value.blockedCount }}</td>\n                            <td>{{ entry.value.waitedTime }}</td>\n                            <td>{{ entry.value.waitedCount }}</td>\n                            <td class=\"thread-dump-modal-lock\" title=\"{{ entry.value.lockName }}\">\n                                <code>{{ entry.value.lockName }}</code>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div class=\"modal-footer\">\n            <button type=\"button\" class=\"btn btn-secondary float-left\" data-dismiss=\"modal\" (click)=\"activeModal.dismiss('closed')\">\n                Done\n            </button>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    JhiThreadModalComponent.ctorParameters = function () { return [
        { type: NgbActiveModal }
    ]; };
    return JhiThreadModalComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiJvmMemoryComponent = /** @class */ (function () {
    function JhiJvmMemoryComponent() {
    }
    JhiJvmMemoryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-jvm-memory',
                    template: "\n        <h4 jhiTranslate=\"metrics.jvm.memory.title\">Memory</h4>\n        <div *ngIf=\"!updating\">\n            <div *ngFor=\"let entry of (jvmMemoryMetrics | keys)\">\n                <span *ngIf=\"entry.value.max != -1; else other\">\n                    <span>{{ entry.key }}</span> ({{ entry.value.used / 1048576 | number: '1.0-0' }}M /\n                    {{ entry.value.max / 1048576 | number: '1.0-0' }}M)\n                </span>\n                <div>Committed : {{ entry.value.committed / 1048576 | number: '1.0-0' }}M</div>\n                <ng-template #other\n                    ><span\n                        ><span>{{ entry.key }}</span> {{ entry.value.used / 1048576 | number: '1.0-0' }}M</span\n                    >\n                </ng-template>\n                <ngb-progressbar\n                    *ngIf=\"entry.value.max != -1\"\n                    type=\"success\"\n                    [value]=\"(100 * entry.value.used) / entry.value.max\"\n                    [striped]=\"true\"\n                    [animated]=\"false\"\n                >\n                    <span>{{ (entry.value.used * 100) / entry.value.max | number: '1.0-0' }}%</span>\n                </ngb-progressbar>\n            </div>\n        </div>\n    "
                }] }
    ];
    JhiJvmMemoryComponent.propDecorators = {
        jvmMemoryMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiJvmMemoryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiJvmThreadsComponent = /** @class */ (function () {
    function JhiJvmThreadsComponent(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    JhiJvmThreadsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.threadStats = {
            threadDumpRunnable: 0,
            threadDumpWaiting: 0,
            threadDumpTimedWaiting: 0,
            threadDumpBlocked: 0,
            threadDumpAll: 0
        };
        this.threadData.forEach(function (value) {
            if (value.threadState === 'RUNNABLE') {
                _this.threadStats.threadDumpRunnable += 1;
            }
            else if (value.threadState === 'WAITING') {
                _this.threadStats.threadDumpWaiting += 1;
            }
            else if (value.threadState === 'TIMED_WAITING') {
                _this.threadStats.threadDumpTimedWaiting += 1;
            }
            else if (value.threadState === 'BLOCKED') {
                _this.threadStats.threadDumpBlocked += 1;
            }
        });
        this.threadStats.threadDumpAll =
            this.threadStats.threadDumpRunnable +
                this.threadStats.threadDumpWaiting +
                this.threadStats.threadDumpTimedWaiting +
                this.threadStats.threadDumpBlocked;
    };
    /**
     * @return {?}
     */
    JhiJvmThreadsComponent.prototype.open = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var modalRef = this.modalService.open(JhiThreadModalComponent);
        modalRef.componentInstance.threadDump = this.threadData;
    };
    JhiJvmThreadsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-jvm-threads',
                    template: "\n        <h4 jhiTranslate=\"metrics.jvm.threads.title\">Threads</h4>\n        <span><span jhiTranslate=\"metrics.jvm.threads.runnable\">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpRunnable\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n        >\n            <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpTimedWaiting\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"warning\"\n        >\n            <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpWaiting\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"warning\"\n        >\n            <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>\n        <ngb-progressbar\n            [value]=\"threadStats.threadDumpBlocked\"\n            [max]=\"threadStats.threadDumpAll\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n        >\n            <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n        </ngb-progressbar>\n        <div>Total: {{ threadStats.threadDumpAll }}</div>\n        <button class=\"hand btn btn-primary btn-sm\" (click)=\"open()\" data-toggle=\"modal\" data-target=\"#threadDump\">\n            <span>Expand</span>\n        </button>\n    "
                }] }
    ];
    /** @nocollapse */
    JhiJvmThreadsComponent.ctorParameters = function () { return [
        { type: NgbModal }
    ]; };
    JhiJvmThreadsComponent.propDecorators = {
        threadData: [{ type: Input }]
    };
    return JhiJvmThreadsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMetricsCacheComponent = /** @class */ (function () {
    function JhiMetricsCacheComponent() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    JhiMetricsCacheComponent.prototype.filterNaN = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    };
    JhiMetricsCacheComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-cache',
                    template: "\n        <h3 jhiTranslate=\"metrics.cache.title\">Cache statistics</h3>\n        <div class=\"table-responsive\" *ngIf=\"!updating\">\n            <table class=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th jhiTranslate=\"metrics.cache.cachename\">Cache name</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.hits\">Cache Hits</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.misses\">Cache Misses</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.gets\">Cache Gets</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.puts\">Cache Puts</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.removals\">Cache Removals</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.evictions\">Cache Evictions</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.hitPercent\">Cache Hit %</th>\n                        <th class=\"text-right\" data-translate=\"metrics.cache.missPercent\">Cache Miss %</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let entry of (cacheMetrics | keys)\">\n                        <td>{{ entry.key }}</td>\n                        <td class=\"text-right\">{{ entry.value['cache.gets.hit'] }}</td>\n                        <td class=\"text-right\">{{ entry.value['cache.gets.miss'] }}</td>\n                        <td class=\"text-right\">{{ entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'] }}</td>\n                        <td class=\"text-right\">{{ entry.value['cache.puts'] }}</td>\n                        <td class=\"text-right\">{{ entry.value['cache.removals'] }}</td>\n                        <td class=\"text-right\">{{ entry.value['cache.evictions'] }}</td>\n                        <td class=\"text-right\">\n                            {{\n                                filterNaN(\n                                    (100 * entry.value['cache.gets.hit']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])\n                                ) | number: '1.0-4'\n                            }}\n                        </td>\n                        <td class=\"text-right\">\n                            {{\n                                filterNaN(\n                                    (100 * entry.value['cache.gets.miss']) /\n                                        (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'])\n                                ) | number: '1.0-4'\n                            }}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    "
                }] }
    ];
    JhiMetricsCacheComponent.propDecorators = {
        cacheMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsCacheComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMetricsDatasourceComponent = /** @class */ (function () {
    function JhiMetricsDatasourceComponent() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    JhiMetricsDatasourceComponent.prototype.filterNaN = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    };
    JhiMetricsDatasourceComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-datasource',
                    template: "\n        <h3 jhiTranslate=\"metrics.datasource.title\">DataSource statistics (time in millisecond)</h3>\n        <div class=\"table-responsive\" *ngIf=\"!updating\">\n            <table class=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>\n                            <span jhiTranslate=\"metrics.datasource.usage\">Connection Pool Usage</span> (active:\n                            {{ datasourceMetrics.active.value }}, min: {{ datasourceMetrics.min.value }}, max:\n                            {{ datasourceMetrics.max.value }}, idle: {{ datasourceMetrics.idle.value }})\n                        </th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.datasource.count\">Count</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.datasource.mean\">Mean</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.min\">Min</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p50\">p50</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p75\">p75</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p95\">p95</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p99\">p99</th>\n                        <th class=\"text-right\" jhiTranslate=\"metrics.datasource.max\">Max</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Acquire</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.acquire.count }}</td>\n                        <td class=\"text-right\">{{ filterNaN(datasourceMetrics.acquire.mean) | number: '1.0-2' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.acquire['0.0'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.acquire['0.5'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.acquire['0.75'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.acquire['0.95'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.acquire['0.99'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ filterNaN(datasourceMetrics.acquire.max) | number: '1.0-2' }}</td>\n                    </tr>\n                    <tr>\n                        <td>Creation</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.creation.count }}</td>\n                        <td class=\"text-right\">{{ filterNaN(datasourceMetrics.creation.mean) | number: '1.0-2' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.creation['0.0'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.creation['0.5'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.creation['0.75'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.creation['0.95'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.creation['0.99'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ filterNaN(datasourceMetrics.creation.max) | number: '1.0-2' }}</td>\n                    </tr>\n                    <tr>\n                        <td>Usage</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.usage.count }}</td>\n                        <td class=\"text-right\">{{ filterNaN(datasourceMetrics.usage.mean) | number: '1.0-2' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.usage['0.0'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.usage['0.5'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.usage['0.75'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.usage['0.95'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ datasourceMetrics.usage['0.99'] | number: '1.0-3' }}</td>\n                        <td class=\"text-right\">{{ filterNaN(datasourceMetrics.usage.max) | number: '1.0-2' }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    "
                }] }
    ];
    JhiMetricsDatasourceComponent.propDecorators = {
        datasourceMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsDatasourceComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMetricsEndpointsRequestsComponent = /** @class */ (function () {
    function JhiMetricsEndpointsRequestsComponent() {
    }
    JhiMetricsEndpointsRequestsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-endpoints-requests',
                    template: "\n        <h3>Endpoints requests (time in millisecond)</h3>\n        <div class=\"table-responsive\" *ngIf=\"!updating\">\n            <table class=\"table table-striped\">\n                <thead>\n                    <tr>\n                        <th>Method</th>\n                        <th>Endpoint url</th>\n                        <th class=\"text-right\">Count</th>\n                        <th class=\"text-right\">Mean</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <ng-container *ngFor=\"let entry of (endpointsRequestsMetrics | keys)\">\n                        <tr *ngFor=\"let method of (entry.value | keys)\">\n                            <td>{{ method.key }}</td>\n                            <td>{{ entry.key }}</td>\n                            <td class=\"text-right\">{{ method.value.count }}</td>\n                            <td class=\"text-right\">{{ method.value.mean | number: '1.0-3' }}</td>\n                        </tr>\n                    </ng-container>\n                </tbody>\n            </table>\n        </div>\n    "
                }] }
    ];
    JhiMetricsEndpointsRequestsComponent.propDecorators = {
        endpointsRequestsMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsEndpointsRequestsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMetricsGarbageCollectorComponent = /** @class */ (function () {
    function JhiMetricsGarbageCollectorComponent() {
    }
    JhiMetricsGarbageCollectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-garbagecollector',
                    template: "\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <div *ngIf=\"garbageCollectorMetrics\">\n                    <span>\n                        GC Live Data Size/GC Max Data Size ({{\n                            garbageCollectorMetrics['jvm.gc.live.data.size'] / 1048576 | number: '1.0-0'\n                        }}M / {{ garbageCollectorMetrics['jvm.gc.max.data.size'] / 1048576 | number: '1.0-0' }}M)</span\n                    >\n                    <ngb-progressbar\n                        [max]=\"garbageCollectorMetrics['jvm.gc.max.data.size']\"\n                        [value]=\"garbageCollectorMetrics['jvm.gc.live.data.size']\"\n                        [striped]=\"true\"\n                        [animated]=\"false\"\n                        type=\"success\"\n                    >\n                        <span\n                            >{{\n                                (100 * garbageCollectorMetrics['jvm.gc.live.data.size']) / garbageCollectorMetrics['jvm.gc.max.data.size']\n                                    | number: '1.0-2'\n                            }}%</span\n                        >\n                    </ngb-progressbar>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div *ngIf=\"garbageCollectorMetrics\">\n                    <span>\n                        GC Memory Promoted/GC Memory Allocated ({{\n                            garbageCollectorMetrics['jvm.gc.memory.promoted'] / 1048576 | number: '1.0-0'\n                        }}M / {{ garbageCollectorMetrics['jvm.gc.memory.allocated'] / 1048576 | number: '1.0-0' }}M)</span\n                    >\n                    <ngb-progressbar\n                        [max]=\"garbageCollectorMetrics['jvm.gc.memory.allocated']\"\n                        [value]=\"garbageCollectorMetrics['jvm.gc.memory.promoted']\"\n                        [striped]=\"true\"\n                        [animated]=\"false\"\n                        type=\"success\"\n                    >\n                        <span\n                            >{{\n                                (100 * garbageCollectorMetrics['jvm.gc.memory.promoted']) /\n                                    garbageCollectorMetrics['jvm.gc.memory.allocated'] | number: '1.0-2'\n                            }}%</span\n                        >\n                    </ngb-progressbar>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\n                    <div class=\"col-md-9\">Classes loaded</div>\n                    <div class=\"col-md-3 text-right\">{{ garbageCollectorMetrics.classesLoaded }}</div>\n                </div>\n                <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\n                    <div class=\"col-md-9\">Classes unloaded</div>\n                    <div class=\"col-md-3 text-right\">{{ garbageCollectorMetrics.classesUnloaded }}</div>\n                </div>\n            </div>\n            <div class=\"table-responsive\" *ngIf=\"!updating && garbageCollectorMetrics\">\n                <table class=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.count\">Count</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.mean\">Mean</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.min\">Min</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p50\">p50</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p75\">p75</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p95\">p95</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p99\">p99</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.max\">Max</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>jvm.gc.pause</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause'].count }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause'].mean | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.0'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.5'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.75'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.95'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.99'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause'].max | number: '1.0-3' }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    "
                }] }
    ];
    JhiMetricsGarbageCollectorComponent.propDecorators = {
        garbageCollectorMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsGarbageCollectorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMetricsHttpRequestComponent = /** @class */ (function () {
    function JhiMetricsHttpRequestComponent() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    JhiMetricsHttpRequestComponent.prototype.filterNaN = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (isNaN(input)) {
            return 0;
        }
        return input;
    };
    JhiMetricsHttpRequestComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-request',
                    template: "\n        <h3 jhiTranslate=\"metrics.jvm.http.title\">HTTP requests (time in millisecond)</h3>\n        <table class=\"table table-striped\" *ngIf=\"!updating\">\n            <thead>\n                <tr>\n                    <th jhiTranslate=\"metrics.jvm.http.table.code\">Code</th>\n                    <th jhiTranslate=\"metrics.jvm.http.table.count\">Count</th>\n                    <th class=\"text-right\" jhiTranslate=\"metrics.jvm.http.table.mean\">Mean</th>\n                    <th class=\"text-right\" jhiTranslate=\"metrics.jvm.http.table.max\">Max</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor=\"let entry of (requestMetrics['percode'] | keys)\">\n                    <td>{{ entry.key }}</td>\n                    <td>\n                        <ngb-progressbar\n                            [max]=\"requestMetrics['all'].count\"\n                            [value]=\"entry.value.count\"\n                            [striped]=\"true\"\n                            [animated]=\"false\"\n                            type=\"success\"\n                        >\n                            <span>{{ entry.value.count }}</span>\n                        </ngb-progressbar>\n                    </td>\n                    <td class=\"text-right\">\n                        {{ filterNaN(entry.value.mean) | number: '1.0-2' }}\n                    </td>\n                    <td class=\"text-right\">{{ entry.value.max | number: '1.0-2' }}</td>\n                </tr>\n            </tbody>\n        </table>\n    "
                }] }
    ];
    JhiMetricsHttpRequestComponent.propDecorators = {
        requestMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsHttpRequestComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiMetricsSystemComponent = /** @class */ (function () {
    function JhiMetricsSystemComponent() {
    }
    /**
     * @param {?} ms
     * @return {?}
     */
    JhiMetricsSystemComponent.prototype.convertMillisecondsToDuration = /**
     * @param {?} ms
     * @return {?}
     */
    function (ms) {
        /** @type {?} */
        var times = {
            year: 31557600000,
            month: 2629746000,
            day: 86400000,
            hour: 3600000,
            minute: 60000,
            second: 1000
        };
        /** @type {?} */
        var time_string = '';
        for (var key in times) {
            if (Math.floor(ms / times[key]) > 0) {
                /** @type {?} */
                var plural = '';
                if (Math.floor(ms / times[key]) > 1) {
                    plural = 's';
                }
                time_string += Math.floor(ms / times[key]).toString() + ' ' + key.toString() + plural + ' ';
                ms = ms - times[key] * Math.floor(ms / times[key]);
            }
        }
        return time_string;
    };
    JhiMetricsSystemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-system',
                    template: "\n        <h4>System</h4>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-4\">Uptime</div>\n            <div class=\"col-md-8 text-right\">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-4\">Start time</div>\n            <div class=\"col-md-8 text-right\">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">Process CPU usage</div>\n            <div class=\"col-md-3 text-right\">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>\n        </div>\n        <ngb-progressbar\n            [value]=\"100 * systemMetrics['process.cpu.usage']\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n            *ngIf=\"!updating\"\n        >\n            <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>\n        </ngb-progressbar>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">System CPU usage</div>\n            <div class=\"col-md-3 text-right\">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>\n        </div>\n        <ngb-progressbar\n            [value]=\"100 * systemMetrics['system.cpu.usage']\"\n            [striped]=\"true\"\n            [animated]=\"false\"\n            type=\"success\"\n            *ngIf=\"!updating\"\n        >\n            <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>\n        </ngb-progressbar>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">System CPU count</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['system.cpu.count'] }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">System 1m Load average</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">Process files max</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>\n        </div>\n        <div class=\"row\" *ngIf=\"!updating\">\n            <div class=\"col-md-9\">Process files open</div>\n            <div class=\"col-md-3 text-right\">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>\n        </div>\n    "
                }] }
    ];
    JhiMetricsSystemComponent.propDecorators = {
        systemMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsSystemComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiCapitalizePipe = /** @class */ (function () {
    function JhiCapitalizePipe() {
    }
    /**
     * @param {?} input
     * @return {?}
     */
    JhiCapitalizePipe.prototype.transform = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        if (input !== null) {
            input = input.toLowerCase();
        }
        return input.substring(0, 1).toUpperCase() + input.substring(1);
    };
    JhiCapitalizePipe.decorators = [
        { type: Pipe, args: [{ name: 'capitalize' },] }
    ];
    return JhiCapitalizePipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiFilterPipe = /** @class */ (function () {
    function JhiFilterPipe() {
    }
    /**
     * @param {?} input
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    JhiFilterPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    function (input, filter$$1, field) {
        if (!filter$$1) {
            return input;
        }
        /** @type {?} */
        var type = typeof filter$$1;
        if (type === 'string') {
            if (field) {
                return input.filter(this.filterByStringAndField(filter$$1, field));
            }
            return input.filter(this.filterByString(filter$$1));
        }
        if (type === 'object') {
            return input.filter(this.filterByObject(filter$$1));
        }
    };
    /**
     * @private
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    JhiFilterPipe.prototype.filterByStringAndField = /**
     * @private
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    function (filter$$1, field) {
        return function (value) {
            return !filter$$1 || (value[field] && value[field].toLowerCase().indexOf(filter$$1.toLowerCase()) !== -1);
        };
    };
    // adapted from https://github.com/VadimDez/ng2-filter-pipe
    // adapted from https://github.com/VadimDez/ng2-filter-pipe
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    JhiFilterPipe.prototype.filterByString = 
    // adapted from https://github.com/VadimDez/ng2-filter-pipe
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        return function (value) {
            return !filter$$1 || value.toLowerCase().indexOf(filter$$1.toLowerCase()) !== -1;
        };
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    JhiFilterPipe.prototype.filterDefault = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        return function (value) {
            return !filter$$1 || filter$$1 === value;
        };
    };
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    JhiFilterPipe.prototype.filterByObject = /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter$$1) {
        var _this = this;
        return function (value) {
            var e_1, _a;
            /** @type {?} */
            var keys = Object.keys(filter$$1);
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var key = keys_1_1.value;
                    /** @type {?} */
                    var type = typeof value[key];
                    /** @type {?} */
                    var isMatching = void 0;
                    if (type === 'string') {
                        isMatching = _this.filterByString(filter$$1[key])(value[key]);
                    }
                    else if (type === 'object') {
                        isMatching = _this.filterByObject(filter$$1[key])(value[key]);
                    }
                    else {
                        isMatching = _this.filterDefault(filter$$1[key])(value[key]);
                    }
                    if (!isMatching) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        };
    };
    JhiFilterPipe.decorators = [
        { type: Pipe, args: [{ name: 'filter', pure: false },] }
    ];
    return JhiFilterPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiKeysPipe = /** @class */ (function () {
    function JhiKeysPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    JhiKeysPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var e_1, _a;
        /** @type {?} */
        var keys = [];
        /** @type {?} */
        var valueKeys = Object.keys(value);
        try {
            for (var valueKeys_1 = __values(valueKeys), valueKeys_1_1 = valueKeys_1.next(); !valueKeys_1_1.done; valueKeys_1_1 = valueKeys_1.next()) {
                var key = valueKeys_1_1.value;
                keys.push({ key: key, value: value[key] });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (valueKeys_1_1 && !valueKeys_1_1.done && (_a = valueKeys_1.return)) _a.call(valueKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return keys;
    };
    JhiKeysPipe.decorators = [
        { type: Pipe, args: [{ name: 'keys' },] }
    ];
    return JhiKeysPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiOrderByPipe = /** @class */ (function () {
    function JhiOrderByPipe() {
    }
    /**
     * @param {?} values
     * @param {?=} predicate
     * @param {?=} reverse
     * @return {?}
     */
    JhiOrderByPipe.prototype.transform = /**
     * @param {?} values
     * @param {?=} predicate
     * @param {?=} reverse
     * @return {?}
     */
    function (values, predicate, reverse) {
        if (predicate === void 0) { predicate = ''; }
        if (reverse === void 0) { reverse = false; }
        if (predicate === '') {
            return reverse ? values.sort().reverse() : values.sort();
        }
        return values.sort(function (a, b) {
            if (a[predicate] < b[predicate]) {
                return reverse ? 1 : -1;
            }
            else if (b[predicate] < a[predicate]) {
                return reverse ? -1 : 1;
            }
            return 0;
        });
    };
    JhiOrderByPipe.decorators = [
        { type: Pipe, args: [{ name: 'orderBy' },] }
    ];
    return JhiOrderByPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiPureFilterPipe = /** @class */ (function (_super) {
    __extends(JhiPureFilterPipe, _super);
    function JhiPureFilterPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} input
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    JhiPureFilterPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    function (input, filter$$1, field) {
        return _super.prototype.transform.call(this, input, filter$$1, field);
    };
    JhiPureFilterPipe.decorators = [
        { type: Pipe, args: [{ name: 'pureFilter' },] }
    ];
    return JhiPureFilterPipe;
}(JhiFilterPipe));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiTruncateCharactersPipe = /** @class */ (function () {
    function JhiTruncateCharactersPipe() {
    }
    /**
     * @param {?} input
     * @param {?} chars
     * @param {?=} breakOnWord
     * @return {?}
     */
    JhiTruncateCharactersPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} chars
     * @param {?=} breakOnWord
     * @return {?}
     */
    function (input, chars, breakOnWord) {
        if (isNaN(chars)) {
            return input;
        }
        if (chars <= 0) {
            return '';
        }
        if (input && input.length > chars) {
            input = input.substring(0, chars);
            if (!breakOnWord) {
                /** @type {?} */
                var lastspace = input.lastIndexOf(' ');
                // Get last space
                if (lastspace !== -1) {
                    input = input.substr(0, lastspace);
                }
            }
            else {
                while (input.charAt(input.length - 1) === ' ') {
                    input = input.substr(0, input.length - 1);
                }
            }
            return input + '...';
        }
        return input;
    };
    JhiTruncateCharactersPipe.decorators = [
        { type: Pipe, args: [{ name: 'truncateCharacters' },] }
    ];
    return JhiTruncateCharactersPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiTruncateWordsPipe = /** @class */ (function () {
    function JhiTruncateWordsPipe() {
    }
    /**
     * @param {?} input
     * @param {?} words
     * @return {?}
     */
    JhiTruncateWordsPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} words
     * @return {?}
     */
    function (input, words) {
        if (isNaN(words)) {
            return input;
        }
        if (words <= 0) {
            return '';
        }
        if (input) {
            /** @type {?} */
            var inputWords = input.split(/\s+/);
            if (inputWords.length > words) {
                input = inputWords.slice(0, words).join(' ') + '...';
            }
        }
        return input;
    };
    JhiTruncateWordsPipe.decorators = [
        { type: Pipe, args: [{ name: 'truncateWords' },] }
    ];
    return JhiTruncateWordsPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var JHI_PIPES = [
    JhiCapitalizePipe,
    JhiFilterPipe,
    JhiKeysPipe,
    JhiOrderByPipe,
    JhiPureFilterPipe,
    JhiTruncateCharactersPipe,
    JhiTruncateWordsPipe
];
/** @type {?} */
var JHI_DIRECTIVES = [
    JhiMaxValidatorDirective,
    JhiMinValidatorDirective,
    JhiMaxbytesValidatorDirective,
    JhiMinbytesValidatorDirective,
    JhiSortDirective,
    JhiSortByDirective
];
/** @type {?} */
var JHI_COMPONENTS = [
    JhiItemCountComponent,
    JhiBooleanComponent,
    JhiJvmMemoryComponent,
    JhiJvmThreadsComponent,
    JhiMetricsHttpRequestComponent,
    JhiMetricsEndpointsRequestsComponent,
    JhiMetricsCacheComponent,
    JhiMetricsDatasourceComponent,
    JhiMetricsSystemComponent,
    JhiMetricsGarbageCollectorComponent,
    JhiThreadModalComponent
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiAlertService = /** @class */ (function () {
    function JhiAlertService(sanitizer, configService, translateService) {
        this.sanitizer = sanitizer;
        this.configService = configService;
        this.translateService = translateService;
        /** @type {?} */
        var config = this.configService.getConfig();
        this.toast = config.alertAsToast;
        this.i18nEnabled = config.i18nEnabled;
        this.alertId = 0; // unique id for each alert. Starts from 0.
        this.alerts = [];
        this.timeout = config.alertTimeout;
    }
    /**
     * @return {?}
     */
    JhiAlertService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.alerts.splice(0, this.alerts.length);
    };
    /**
     * @return {?}
     */
    JhiAlertService.prototype.get = /**
     * @return {?}
     */
    function () {
        return this.alerts;
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.success = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'success',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.error = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'danger',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.warning = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'warning',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.info = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'info',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} alertOptions
     * @param {?} extAlerts
     * @return {?}
     */
    JhiAlertService.prototype.addAlert = /**
     * @param {?} alertOptions
     * @param {?} extAlerts
     * @return {?}
     */
    function (alertOptions, extAlerts) {
        var _this = this;
        alertOptions.id = this.alertId++;
        if (this.i18nEnabled && alertOptions.msg) {
            alertOptions.msg = this.translateService.instant(alertOptions.msg, alertOptions.params);
        }
        /** @type {?} */
        var alert = this.factory(alertOptions);
        if (alertOptions.timeout && alertOptions.timeout > 0) {
            setTimeout(function () {
                _this.closeAlert(alertOptions.id, extAlerts);
            }, alertOptions.timeout);
        }
        return alert;
    };
    /**
     * @param {?} id
     * @param {?=} extAlerts
     * @return {?}
     */
    JhiAlertService.prototype.closeAlert = /**
     * @param {?} id
     * @param {?=} extAlerts
     * @return {?}
     */
    function (id, extAlerts) {
        /** @type {?} */
        var thisAlerts = extAlerts && extAlerts.length > 0 ? extAlerts : this.alerts;
        return this.closeAlertByIndex(thisAlerts.map(function (e) { return e.id; }).indexOf(id), thisAlerts);
    };
    /**
     * @param {?} index
     * @param {?} thisAlerts
     * @return {?}
     */
    JhiAlertService.prototype.closeAlertByIndex = /**
     * @param {?} index
     * @param {?} thisAlerts
     * @return {?}
     */
    function (index, thisAlerts) {
        return thisAlerts.splice(index, 1);
    };
    /**
     * @return {?}
     */
    JhiAlertService.prototype.isToast = /**
     * @return {?}
     */
    function () {
        return this.toast;
    };
    /**
     * @private
     * @param {?} alertOptions
     * @return {?}
     */
    JhiAlertService.prototype.factory = /**
     * @private
     * @param {?} alertOptions
     * @return {?}
     */
    function (alertOptions) {
        var _this = this;
        /** @type {?} */
        var alert = {
            type: alertOptions.type,
            msg: this.sanitizer.sanitize(SecurityContext.HTML, alertOptions.msg),
            id: alertOptions.id,
            timeout: alertOptions.timeout,
            toast: alertOptions.toast,
            position: alertOptions.position ? alertOptions.position : 'top right',
            scoped: alertOptions.scoped,
            close: function (alerts) {
                return _this.closeAlert(alertOptions.id, alerts);
            }
        };
        if (!alert.scoped) {
            this.alerts.push(alert);
        }
        return alert;
    };
    JhiAlertService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiAlertService.ctorParameters = function () { return [
        { type: Sanitizer },
        { type: JhiConfigService },
        { type: TranslateService }
    ]; };
    /** @nocollapse */ JhiAlertService.ngInjectableDef = defineInjectable({ factory: function JhiAlertService_Factory() { return new JhiAlertService(inject(Sanitizer), inject(JhiConfigService), inject(TranslateService)); }, token: JhiAlertService, providedIn: "root" });
    return JhiAlertService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An utility service for pagination
 */
var JhiPaginationUtil = /** @class */ (function () {
    function JhiPaginationUtil() {
    }
    /**
     * Method to find whether the sort is defined
     */
    /**
     * Method to find whether the sort is defined
     * @param {?} sort
     * @return {?}
     */
    JhiPaginationUtil.prototype.parseAscending = /**
     * Method to find whether the sort is defined
     * @param {?} sort
     * @return {?}
     */
    function (sort) {
        /** @type {?} */
        var sortArray = sort.split(',');
        sortArray = sortArray.length > 1 ? sortArray : sort.split('%2C');
        if (sortArray.length > 1) {
            return sortArray.slice(-1)[0] === 'asc';
        }
        // default to true if no sort is defined
        return true;
    };
    /**
     * Method to query params are strings, and need to be parsed
     */
    /**
     * Method to query params are strings, and need to be parsed
     * @param {?} page
     * @return {?}
     */
    JhiPaginationUtil.prototype.parsePage = /**
     * Method to query params are strings, and need to be parsed
     * @param {?} page
     * @return {?}
     */
    function (page) {
        return parseInt(page, 10);
    };
    /**
     * Method to sort can be in the format `id,asc` or `id`
     */
    /**
     * Method to sort can be in the format `id,asc` or `id`
     * @param {?} sort
     * @return {?}
     */
    JhiPaginationUtil.prototype.parsePredicate = /**
     * Method to sort can be in the format `id,asc` or `id`
     * @param {?} sort
     * @return {?}
     */
    function (sort) {
        return sort.split(',')[0].split('%2C')[0];
    };
    JhiPaginationUtil.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiPaginationUtil.ctorParameters = function () { return []; };
    /** @nocollapse */ JhiPaginationUtil.ngInjectableDef = defineInjectable({ factory: function JhiPaginationUtil_Factory() { return new JhiPaginationUtil(); }, token: JhiPaginationUtil, providedIn: "root" });
    return JhiPaginationUtil;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiResolvePagingParams = /** @class */ (function () {
    function JhiResolvePagingParams(paginationUtil) {
        this.paginationUtil = paginationUtil;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    JhiResolvePagingParams.prototype.resolve = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var page = route.queryParams['page'] ? route.queryParams['page'] : '1';
        /** @type {?} */
        var defaultSort = route.data['defaultSort'] ? route.data['defaultSort'] : 'id,asc';
        /** @type {?} */
        var sort = route.queryParams['sort'] ? route.queryParams['sort'] : defaultSort;
        return {
            page: this.paginationUtil.parsePage(page),
            predicate: this.paginationUtil.parsePredicate(sort),
            ascending: this.paginationUtil.parseAscending(sort)
        };
    };
    JhiResolvePagingParams.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiResolvePagingParams.ctorParameters = function () { return [
        { type: JhiPaginationUtil }
    ]; };
    /** @nocollapse */ JhiResolvePagingParams.ngInjectableDef = defineInjectable({ factory: function JhiResolvePagingParams_Factory() { return new JhiResolvePagingParams(inject(JhiPaginationUtil)); }, token: JhiResolvePagingParams, providedIn: "root" });
    return JhiResolvePagingParams;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} http
 * @return {?}
 */
function translatePartialLoader(http) {
    return new TranslateHttpLoader(http, 'i18n/', ".json?buildTimestamp=" + process.env.BUILD_TIMESTAMP);
}
/**
 * @param {?} configService
 * @return {?}
 */
function missingTranslationHandler(configService) {
    return new JhiMissingTranslationHandler(configService);
}
var NgJhipsterModule = /** @class */ (function () {
    function NgJhipsterModule() {
    }
    /**
     * @param {?} moduleConfig
     * @return {?}
     */
    NgJhipsterModule.forRoot = /**
     * @param {?} moduleConfig
     * @return {?}
     */
    function (moduleConfig) {
        return {
            ngModule: NgJhipsterModule,
            providers: [
                {
                    provide: JhiLanguageService,
                    useClass: JhiLanguageService,
                    deps: [TranslateService, JhiConfigService]
                },
                {
                    provide: JhiResolvePagingParams,
                    useClass: JhiResolvePagingParams,
                    deps: [JhiPaginationUtil]
                },
                {
                    provide: JhiAlertService,
                    useClass: JhiAlertService,
                    deps: [Sanitizer, JhiConfigService, TranslateService]
                },
                { provide: JhiModuleConfig, useValue: moduleConfig },
                {
                    provide: JhiConfigService,
                    useClass: JhiConfigService,
                    deps: [JhiModuleConfig]
                }
            ]
        };
    };
    /**
     * @param {?} moduleConfig
     * @return {?}
     */
    NgJhipsterModule.forChild = /**
     * @param {?} moduleConfig
     * @return {?}
     */
    function (moduleConfig) {
        return {
            ngModule: NgJhipsterModule,
            providers: [{ provide: JhiModuleConfig, useValue: moduleConfig }]
        };
    };
    NgJhipsterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        TranslateModule.forRoot({
                            loader: {
                                provide: TranslateLoader,
                                useFactory: translatePartialLoader,
                                deps: [HttpClient]
                            },
                            missingTranslationHandler: {
                                provide: MissingTranslationHandler,
                                useFactory: missingTranslationHandler,
                                deps: [JhiConfigService]
                            }
                        }),
                        CommonModule,
                        NgbModule.forRoot(),
                        FormsModule
                    ],
                    declarations: __spread(JHI_PIPES, JHI_DIRECTIVES, JHI_COMPONENTS, [JhiTranslateDirective]),
                    entryComponents: [JhiThreadModalComponent],
                    exports: __spread(JHI_PIPES, JHI_DIRECTIVES, JHI_COMPONENTS, [JhiTranslateDirective, TranslateModule, CommonModule])
                },] }
    ];
    return NgJhipsterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An utility service for link parsing.
 */
var JhiParseLinks = /** @class */ (function () {
    function JhiParseLinks() {
    }
    /**
     * Method to parse the links
     */
    /**
     * Method to parse the links
     * @param {?} header
     * @return {?}
     */
    JhiParseLinks.prototype.parse = /**
     * Method to parse the links
     * @param {?} header
     * @return {?}
     */
    function (header) {
        if (header.length === 0) {
            throw new Error('input must not be of zero length');
        }
        // Split parts by comma
        /** @type {?} */
        var parts = header.split(',');
        /** @type {?} */
        var links = {};
        // Parse each part into a named link
        parts.forEach(function (p) {
            /** @type {?} */
            var section = p.split(';');
            if (section.length !== 2) {
                throw new Error('section could not be split on ";"');
            }
            /** @type {?} */
            var url = section[0].replace(/<(.*)>/, '$1').trim();
            /** @type {?} */
            var queryString = {};
            url.replace(new RegExp('([^?=&]+)(=([^&]*))?', 'g'), function ($0, $1, $2, $3) { return (queryString[$1] = $3); });
            /** @type {?} */
            var page = queryString.page;
            if (typeof page === 'string') {
                page = parseInt(page, 10);
            }
            /** @type {?} */
            var name = section[1].replace(/rel="(.*)"/, '$1').trim();
            links[name] = page;
        });
        return links;
    };
    JhiParseLinks.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiParseLinks.ctorParameters = function () { return []; };
    /** @nocollapse */ JhiParseLinks.ngInjectableDef = defineInjectable({ factory: function JhiParseLinks_Factory() { return new JhiParseLinks(); }, token: JhiParseLinks, providedIn: "root" });
    return JhiParseLinks;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An utility service for data.
 */
var JhiDataUtils = /** @class */ (function () {
    function JhiDataUtils() {
    }
    /**
     * Method to abbreviate the text given
     */
    /**
     * Method to abbreviate the text given
     * @param {?} text
     * @param {?=} append
     * @return {?}
     */
    JhiDataUtils.prototype.abbreviate = /**
     * Method to abbreviate the text given
     * @param {?} text
     * @param {?=} append
     * @return {?}
     */
    function (text, append) {
        if (append === void 0) { append = '...'; }
        if (text.length < 30) {
            return text;
        }
        return text ? text.substring(0, 15) + append + text.slice(-10) : '';
    };
    /**
     * Method to find the byte size of the string provides
     */
    /**
     * Method to find the byte size of the string provides
     * @param {?} base64String
     * @return {?}
     */
    JhiDataUtils.prototype.byteSize = /**
     * Method to find the byte size of the string provides
     * @param {?} base64String
     * @return {?}
     */
    function (base64String) {
        return this.formatAsBytes(this.size(base64String));
    };
    /**
     * Method to open file
     */
    /**
     * Method to open file
     * @param {?} contentType
     * @param {?} data
     * @return {?}
     */
    JhiDataUtils.prototype.openFile = /**
     * Method to open file
     * @param {?} contentType
     * @param {?} data
     * @return {?}
     */
    function (contentType, data) {
        if (window.navigator && window.navigator.msSaveOrOpenBlob) {
            // To support IE and Edge
            /** @type {?} */
            var byteCharacters = atob(data);
            /** @type {?} */
            var byteNumbers = new Array(byteCharacters.length);
            for (var i = 0; i < byteCharacters.length; i++) {
                byteNumbers[i] = byteCharacters.charCodeAt(i);
            }
            /** @type {?} */
            var byteArray = new Uint8Array(byteNumbers);
            /** @type {?} */
            var blob = new Blob([byteArray], {
                type: contentType
            });
            window.navigator.msSaveOrOpenBlob(blob);
        }
        else {
            // Other browsers
            /** @type {?} */
            var fileURL = "data:" + contentType + ";base64," + data;
            /** @type {?} */
            var win = window.open();
            win.document.write('<iframe src="' +
                fileURL +
                '" frameborder="0" style="border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;" allowfullscreen></iframe>');
        }
    };
    /**
     * Method to convert the file to base64
     */
    /**
     * Method to convert the file to base64
     * @param {?} file
     * @param {?} cb
     * @return {?}
     */
    JhiDataUtils.prototype.toBase64 = /**
     * Method to convert the file to base64
     * @param {?} file
     * @param {?} cb
     * @return {?}
     */
    function (file, cb) {
        /** @type {?} */
        var fileReader = new FileReader();
        fileReader.onload = function (e) {
            /** @type {?} */
            var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);
            cb(base64Data);
        };
        fileReader.readAsDataURL(file);
    };
    /**
     * Method to clear the input
     */
    /**
     * Method to clear the input
     * @param {?} entity
     * @param {?} elementRef
     * @param {?} field
     * @param {?} fieldContentType
     * @param {?} idInput
     * @return {?}
     */
    JhiDataUtils.prototype.clearInputImage = /**
     * Method to clear the input
     * @param {?} entity
     * @param {?} elementRef
     * @param {?} field
     * @param {?} fieldContentType
     * @param {?} idInput
     * @return {?}
     */
    function (entity, elementRef, field, fieldContentType, idInput) {
        if (entity && field && fieldContentType) {
            if (entity.hasOwnProperty(field)) {
                entity[field] = null;
            }
            if (entity.hasOwnProperty(fieldContentType)) {
                entity[fieldContentType] = null;
            }
            if (elementRef && idInput && elementRef.nativeElement.querySelector('#' + idInput)) {
                elementRef.nativeElement.querySelector('#' + idInput).value = null;
            }
        }
    };
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param event the object containing the file (at event.target.files[0])
     * @param entity the object to set the file's 'base 64 data' and 'file type' on
     * @param field the field name to set the file's 'base 64 data' on
     * @param isImage boolean representing if the file represented by the event is an image
     * @returns a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param {?} event the object containing the file (at event.target.files[0])
     * @param {?} entity the object to set the file's 'base 64 data' and 'file type' on
     * @param {?} field the field name to set the file's 'base 64 data' on
     * @param {?} isImage boolean representing if the file represented by the event is an image
     * @return {?} a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    JhiDataUtils.prototype.setFileData = /**
     * Sets the base 64 data & file type of the 1st file on the event (event.target.files[0]) in the passed entity object
     * and returns a promise.
     *
     * @param {?} event the object containing the file (at event.target.files[0])
     * @param {?} entity the object to set the file's 'base 64 data' and 'file type' on
     * @param {?} field the field name to set the file's 'base 64 data' on
     * @param {?} isImage boolean representing if the file represented by the event is an image
     * @return {?} a promise that resolves to the modified entity if operation is successful, otherwise rejects with an error message
     */
    function (event, entity, field, isImage) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (event && event.target && event.target.files && event.target.files[0]) {
                /** @type {?} */
                var file_1 = event.target.files[0];
                if (isImage && !/^image\//.test(file_1.type)) {
                    reject("File was expected to be an image but was found to be " + file_1.type);
                }
                else {
                    _this.toBase64(file_1, function (base64Data) {
                        entity[field] = base64Data;
                        entity[field + "ContentType"] = file_1.type;
                        resolve(entity);
                    });
                }
            }
            else {
                reject("Base64 data was not set as file could not be extracted from passed parameter: " + event);
            }
        });
    };
    /**
     * Method to download file
     */
    /**
     * Method to download file
     * @param {?} contentType
     * @param {?} data
     * @param {?} fileName
     * @return {?}
     */
    JhiDataUtils.prototype.downloadFile = /**
     * Method to download file
     * @param {?} contentType
     * @param {?} data
     * @param {?} fileName
     * @return {?}
     */
    function (contentType, data, fileName) {
        /** @type {?} */
        var byteCharacters = atob(data);
        /** @type {?} */
        var byteNumbers = new Array(byteCharacters.length);
        for (var i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        /** @type {?} */
        var byteArray = new Uint8Array(byteNumbers);
        /** @type {?} */
        var blob = new Blob([byteArray], {
            type: contentType
        });
        /** @type {?} */
        var tempLink = document.createElement('a');
        tempLink.href = window.URL.createObjectURL(blob);
        tempLink.download = fileName;
        tempLink.target = '_blank';
        tempLink.click();
    };
    /**
     * @private
     * @param {?} suffix
     * @param {?} str
     * @return {?}
     */
    JhiDataUtils.prototype.endsWith = /**
     * @private
     * @param {?} suffix
     * @param {?} str
     * @return {?}
     */
    function (suffix, str) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    JhiDataUtils.prototype.paddingSize = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.endsWith('==', value)) {
            return 2;
        }
        if (this.endsWith('=', value)) {
            return 1;
        }
        return 0;
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    JhiDataUtils.prototype.size = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return (value.length / 4) * 3 - this.paddingSize(value);
    };
    /**
     * @private
     * @param {?} size
     * @return {?}
     */
    JhiDataUtils.prototype.formatAsBytes = /**
     * @private
     * @param {?} size
     * @return {?}
     */
    function (size) {
        return size.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' bytes';
    };
    JhiDataUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiDataUtils.ctorParameters = function () { return []; };
    /** @nocollapse */ JhiDataUtils.ngInjectableDef = defineInjectable({ factory: function JhiDataUtils_Factory() { return new JhiDataUtils(); }, token: JhiDataUtils, providedIn: "root" });
    return JhiDataUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An utility service for date.
 */
var JhiDateUtils = /** @class */ (function () {
    function JhiDateUtils() {
        this.pattern = 'yyyy-MM-dd';
        this.datePipe = new DatePipe('en');
    }
    /**
     * Method to convert the date time from server into JS date object
     */
    /**
     * Method to convert the date time from server into JS date object
     * @param {?} date
     * @return {?}
     */
    JhiDateUtils.prototype.convertDateTimeFromServer = /**
     * Method to convert the date time from server into JS date object
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            return new Date(date);
        }
        else {
            return null;
        }
    };
    /**
     * Method to convert the date from server into JS date object
     */
    /**
     * Method to convert the date from server into JS date object
     * @param {?} date
     * @return {?}
     */
    JhiDateUtils.prototype.convertLocalDateFromServer = /**
     * Method to convert the date from server into JS date object
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date) {
            /** @type {?} */
            var dateString = date.split('-');
            return new Date(dateString[0], dateString[1] - 1, dateString[2]);
        }
        return null;
    };
    /**
     * Method to convert the JS date object into specified date pattern
     */
    /**
     * Method to convert the JS date object into specified date pattern
     * @param {?} date
     * @param {?=} pattern
     * @return {?}
     */
    JhiDateUtils.prototype.convertLocalDateToServer = /**
     * Method to convert the JS date object into specified date pattern
     * @param {?} date
     * @param {?=} pattern
     * @return {?}
     */
    function (date, pattern) {
        if (pattern === void 0) { pattern = this.pattern; }
        if (date) {
            /** @type {?} */
            var newDate = new Date(date.year, date.month - 1, date.day);
            return this.datePipe.transform(newDate, pattern);
        }
        else {
            return null;
        }
    };
    /**
     * Method to get the default date pattern
     */
    /**
     * Method to get the default date pattern
     * @return {?}
     */
    JhiDateUtils.prototype.dateformat = /**
     * Method to get the default date pattern
     * @return {?}
     */
    function () {
        return this.pattern;
    };
    // TODO Change this method when moving from datetime-local input to NgbDatePicker
    // TODO Change this method when moving from datetime-local input to NgbDatePicker
    /**
     * @param {?} date
     * @return {?}
     */
    JhiDateUtils.prototype.toDate = 
    // TODO Change this method when moving from datetime-local input to NgbDatePicker
    /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        if (date === undefined || date === null) {
            return null;
        }
        /** @type {?} */
        var dateParts = date.split(/\D+/);
        if (dateParts.length === 7) {
            return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5], dateParts[6]);
        }
        if (dateParts.length === 6) {
            return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4], dateParts[5]);
        }
        return new Date(dateParts[0], dateParts[1] - 1, dateParts[2], dateParts[3], dateParts[4]);
    };
    JhiDateUtils.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiDateUtils.ctorParameters = function () { return []; };
    /** @nocollapse */ JhiDateUtils.ngInjectableDef = defineInjectable({ factory: function JhiDateUtils_Factory() { return new JhiDateUtils(); }, token: JhiDateUtils, providedIn: "root" });
    return JhiDateUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An utility class to manage RX events
 */
var JhiEventManager = /** @class */ (function () {
    function JhiEventManager() {
        var _this = this;
        this.observable = Observable.create(function (observer) {
            _this.observer = observer;
        }).pipe(share());
    }
    /**
     * Method to broadcast the event to observer
     */
    /**
     * Method to broadcast the event to observer
     * @param {?} event
     * @return {?}
     */
    JhiEventManager.prototype.broadcast = /**
     * Method to broadcast the event to observer
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.observer != null) {
            this.observer.next(event);
        }
    };
    /**
     * Method to subscribe to an event with callback
     */
    /**
     * Method to subscribe to an event with callback
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    JhiEventManager.prototype.subscribe = /**
     * Method to subscribe to an event with callback
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    function (eventName, callback) {
        /** @type {?} */
        var subscriber = this.observable
            .pipe(filter(function (event) {
            return event.name === eventName;
        }))
            .subscribe(callback);
        return subscriber;
    };
    /**
     * Method to unsubscribe the subscription
     */
    /**
     * Method to unsubscribe the subscription
     * @param {?} subscriber
     * @return {?}
     */
    JhiEventManager.prototype.destroy = /**
     * Method to unsubscribe the subscription
     * @param {?} subscriber
     * @return {?}
     */
    function (subscriber) {
        subscriber.unsubscribe();
    };
    JhiEventManager.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiEventManager.ctorParameters = function () { return []; };
    /** @nocollapse */ JhiEventManager.ngInjectableDef = defineInjectable({ factory: function JhiEventManager_Factory() { return new JhiEventManager(); }, token: JhiEventManager, providedIn: "root" });
    return JhiEventManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var JhiBase64Service = /** @class */ (function () {
    function JhiBase64Service() {
        this.keyStr = 'ABCDEFGHIJKLMNOP' + 'QRSTUVWXYZabcdef' + 'ghijklmnopqrstuv' + 'wxyz0123456789+/' + '=';
    }
    /**
     * @param {?} input
     * @return {?}
     */
    JhiBase64Service.prototype.encode = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var output = '';
        /** @type {?} */
        var enc1 = '';
        /** @type {?} */
        var enc2 = '';
        /** @type {?} */
        var enc3 = '';
        /** @type {?} */
        var enc4 = '';
        /** @type {?} */
        var chr1 = '';
        /** @type {?} */
        var chr2 = '';
        /** @type {?} */
        var chr3 = '';
        /** @type {?} */
        var i = 0;
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) + this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    };
    /**
     * @param {?} input
     * @return {?}
     */
    JhiBase64Service.prototype.decode = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var output = '';
        /** @type {?} */
        var enc1 = '';
        /** @type {?} */
        var enc2 = '';
        /** @type {?} */
        var enc3 = '';
        /** @type {?} */
        var enc4 = '';
        /** @type {?} */
        var chr1 = '';
        /** @type {?} */
        var chr2 = '';
        /** @type {?} */
        var chr3 = '';
        /** @type {?} */
        var i = 0;
        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
        while (i < input.length) {
            enc1 = this.keyStr.indexOf(input.charAt(i++));
            enc2 = this.keyStr.indexOf(input.charAt(i++));
            enc3 = this.keyStr.indexOf(input.charAt(i++));
            enc4 = this.keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    };
    JhiBase64Service.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ JhiBase64Service.ngInjectableDef = defineInjectable({ factory: function JhiBase64Service_Factory() { return new JhiBase64Service(); }, token: JhiBase64Service, providedIn: "root" });
    return JhiBase64Service;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { JhiModuleConfig, missingTranslationHandler, NgJhipsterModule, translatePartialLoader, JhiItemCountComponent, JhiBooleanComponent, JhiConfigService, JhiMaxbytesValidatorDirective, JhiMinbytesValidatorDirective, JhiMaxValidatorDirective, JhiMinValidatorDirective, JhiSortDirective, JhiSortByDirective, JhiLanguageService, JhiTranslateDirective, JhiMissingTranslationHandler, JhiTruncateCharactersPipe, JhiTruncateWordsPipe, JhiOrderByPipe, JhiFilterPipe, JhiPureFilterPipe, JhiCapitalizePipe, JhiKeysPipe, JhiPaginationUtil, JhiParseLinks, JhiDataUtils, JhiDateUtils, JhiEventManager, JhiAlertService, JhiBase64Service, JhiResolvePagingParams, JhiJvmMemoryComponent as ɵd, JhiJvmThreadsComponent as ɵe, JhiMetricsCacheComponent as ɵh, JhiMetricsDatasourceComponent as ɵi, JhiMetricsEndpointsRequestsComponent as ɵg, JhiMetricsGarbageCollectorComponent as ɵk, JhiThreadModalComponent as ɵl, JhiMetricsHttpRequestComponent as ɵf, JhiMetricsSystemComponent as ɵj, JHI_COMPONENTS as ɵc, JHI_DIRECTIVES as ɵb, JHI_PIPES as ɵa };

//# sourceMappingURL=ng-jhipster.js.map