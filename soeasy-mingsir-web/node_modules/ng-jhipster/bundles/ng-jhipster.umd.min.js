!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@fortawesome/free-solid-svg-icons"),require("@fortawesome/angular-fontawesome"),require("@angular/common/http"),require("@angular/forms"),require("@ngx-translate/http-loader"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-translate/core"),require("@angular/common"),require("rxjs"),require("rxjs/operators"),require("@angular/core")):"function"==typeof define&&define.amd?define("ng-jhipster",["exports","@fortawesome/free-solid-svg-icons","@fortawesome/angular-fontawesome","@angular/common/http","@angular/forms","@ngx-translate/http-loader","@ng-bootstrap/ng-bootstrap","@ngx-translate/core","@angular/common","rxjs","rxjs/operators","@angular/core"],e):e(t["ng-jhipster"]={},t.freeSolidSvgIcons,t.angularFontawesome,t.ng.common.http,t.ng.forms,t.httpLoader,t.ngBootstrap,t.i1,t.ng.common,t.rxjs,t.rxjs.operators,t.ng.core)}(this,function(t,e,n,r,a,s,i,o,c,l,d,u){"use strict";var p=function(t,e){return(p=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};var h=function(){return(h=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)};function g(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function m(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,s=n.call(t),i=[];try{for(;(void 0===e||0<e--)&&!(r=s.next()).done;)i.push(r.value)}catch(o){a={error:o}}finally{try{r&&!r.done&&(n=s["return"])&&n.call(s)}finally{if(a)throw a.error}}return i}function f(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(m(arguments[e]));return t}var v=function(){function t(){this.sortIcon=e.faSort,this.sortAscIcon=e.faSortUp,this.sortDescIcon=e.faSortDown,this.i18nEnabled=!1,this.defaultI18nLang="en",this.noi18nMessage="translation-not-found",this.alertAsToast=!1,this.alertTimeout=5e3,this.classBadgeTrue="badge badge-success",this.classBadgeFalse="badge badge-danger",this.classTrue="fa fa-lg fa-check text-success",this.classFalse="fa fa-lg fa-times text-danger"}return t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),y=function(){function t(t){this.CONFIG_OPTIONS=h({},new v,t)}return t.prototype.getConfig=function(){return this.CONFIG_OPTIONS},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:v}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(v))},token:t,providedIn:"root"}),t}(),b=function(){function t(t){this.i18nEnabled=t.CONFIG_OPTIONS.i18nEnabled}return t.prototype.i18nValues=function(){return{first:(this.page-1)*this.itemsPerPage==0?1:(this.page-1)*this.itemsPerPage+1,second:this.page*this.itemsPerPage<this.total?this.page*this.itemsPerPage:this.total,total:this.total}},t.decorators=[{type:u.Component,args:[{selector:"jhi-item-count",template:'\n        <div *ngIf="i18nEnabled; else noI18n" class="info jhi-item-count" jhiTranslate="global.item-count" [translateValues]="i18nValues()">\n            /* [attr.translateValues] is used to get entire values in tests */\n        </div>\n        <ng-template #noI18n class="info jhi-item-count">\n            Showing\n            {{ (page - 1) * itemsPerPage == 0 ? 1 : (page - 1) * itemsPerPage + 1 }}\n            - {{ page * itemsPerPage < total ? page * itemsPerPage : total }} of {{ total }} items.\n        </ng-template>\n    '}]}],t.ctorParameters=function(){return[{type:y}]},t.propDecorators={page:[{type:u.Input}],total:[{type:u.Input}],itemsPerPage:[{type:u.Input}]},t}(),j=function(){function t(t){this.config=t.getConfig()}return t.prototype.ngOnInit=function(){this.textTrue===undefined?this.classTrue===undefined&&(this.classTrue=this.config.classTrue):this.classTrue===undefined&&(this.classTrue=this.config.classBadgeTrue),this.textFalse===undefined?this.classFalse===undefined&&(this.classFalse=this.config.classFalse):this.classFalse===undefined&&(this.classFalse=this.config.classBadgeFalse)},t.decorators=[{type:u.Component,args:[{selector:"jhi-boolean",template:'\n        <span [ngClass]="value ? classTrue : classFalse" [innerHtml]="value ? textTrue : textFalse"> </span>\n    '}]}],t.ctorParameters=function(){return[{type:y}]},t.propDecorators={value:[{type:u.Input}],classTrue:[{type:u.Input}],classFalse:[{type:u.Input}],textTrue:[{type:u.Input}],textFalse:[{type:u.Input}]},t}();function I(t){return t.length/4*3-function n(t){if(e("==",t))return 2;if(e("=",t))return 1;return 0}(t);function e(t,e){return-1!==e.indexOf(t,e.length-t.length)}}var x=function(){function t(){}return t.prototype.validate=function(t){return t.value&&I(t.value)>this.jhiMaxbytes?{maxbytes:{valid:!1}}:null},t.decorators=[{type:u.Directive,args:[{selector:"[jhiMaxbytes][ngModel]",providers:[{provide:a.NG_VALIDATORS,useExisting:u.forwardRef(function(){return t}),multi:!0}]}]}],t.ctorParameters=function(){return[]},t.propDecorators={jhiMaxbytes:[{type:u.Input}]},t}(),M=function(){function t(){}return t.prototype.validate=function(t){return t.value&&I(t.value)<this.jhiMinbytes?{minbytes:{valid:!1}}:null},t.decorators=[{type:u.Directive,args:[{selector:"[jhiMinbytes][ngModel]",providers:[{provide:a.NG_VALIDATORS,useExisting:u.forwardRef(function(){return t}),multi:!0}]}]}],t.ctorParameters=function(){return[]},t.propDecorators={jhiMinbytes:[{type:u.Input}]},t}(),S=function(){function t(){}return t.prototype.validate=function(t){return t.value===undefined||null===t.value||t.value<=this.jhiMax?null:{max:{valid:!1}}},t.decorators=[{type:u.Directive,args:[{selector:"[jhiMax][ngModel]",providers:[{provide:a.NG_VALIDATORS,useExisting:u.forwardRef(function(){return t}),multi:!0}]}]}],t.ctorParameters=function(){return[]},t.propDecorators={jhiMax:[{type:u.Input}]},t}(),D=function(){function t(){}return t.prototype.validate=function(t){return t.value===undefined||null===t.value||t.value>=this.jhiMin?null:{min:{valid:!1}}},t.decorators=[{type:u.Directive,args:[{selector:"[jhiMin][ngModel]",providers:[{provide:a.NG_VALIDATORS,useExisting:u.forwardRef(function(){return t}),multi:!0}]}]}],t.ctorParameters=function(){return[]},t.propDecorators={jhiMin:[{type:u.Input}]},t}(),C=function(){function t(){this.predicateChange=new u.EventEmitter,this.ascendingChange=new u.EventEmitter}return t.prototype.sort=function(t){this.ascending=t!==this.predicate||!this.ascending,this.predicate=t,this.predicateChange.emit(t),this.ascendingChange.emit(this.ascending),this.callback()},t.decorators=[{type:u.Directive,args:[{selector:"[jhiSort]"}]}],t.ctorParameters=function(){return[]},t.propDecorators={predicate:[{type:u.Input}],ascending:[{type:u.Input}],callback:[{type:u.Input}],predicateChange:[{type:u.Output}],ascendingChange:[{type:u.Output}]},t}(),T=function(){function t(t,e){this.jhiSort=t,this.jhiSort=t;var n=e.getConfig();this.sortIcon=n.sortIcon,this.sortAscIcon=n.sortAscIcon,this.sortDescIcon=n.sortDescIcon}return t.prototype.ngAfterContentInit=function(){this.jhiSort.predicate&&"_score"!==this.jhiSort.predicate&&this.jhiSort.predicate===this.jhiSortBy&&(this.updateIconDefinition(this.iconComponent,this.jhiSort.ascending?this.sortDescIcon:this.sortAscIcon),this.jhiSort.activeIconComponent=this.iconComponent)},t.prototype.onClick=function(){this.jhiSort.predicate&&"_score"!==this.jhiSort.predicate&&(this.jhiSort.sort(this.jhiSortBy),this.updateIconDefinition(this.jhiSort.activeIconComponent,this.sortIcon),this.updateIconDefinition(this.iconComponent,this.jhiSort.ascending?this.sortDescIcon:this.sortAscIcon),this.jhiSort.activeIconComponent=this.iconComponent)},t.prototype.updateIconDefinition=function(t,e){t&&(t.iconProp=e,t.ngOnChanges({}))},t.decorators=[{type:u.Directive,args:[{selector:"[jhiSortBy]"}]}],t.ctorParameters=function(){return[{type:C,decorators:[{type:u.Host}]},{type:y}]},t.propDecorators={jhiSortBy:[{type:u.Input}],iconComponent:[{type:u.ContentChild,args:[n.FaIconComponent]}],onClick:[{type:u.HostListener,args:["click"]}]},t}(),w=function(){function t(t,e){this.translateService=t,this.configService=e,this.currentLang="en",this.init()}return t.prototype.init=function(){var t=this.configService.getConfig();this.currentLang=t.defaultI18nLang,this.translateService.setDefaultLang(this.currentLang),this.translateService.use(this.currentLang)},t.prototype.changeLanguage=function(t){this.currentLang=t,this.configService.CONFIG_OPTIONS.defaultI18nLang=t,this.translateService.use(this.currentLang)},t.prototype.getCurrent=function(){return Promise.resolve(this.currentLang)},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:o.TranslateService},{type:y}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(o.TranslateService),u.inject(y))},token:t,providedIn:"root"}),t}(),P=function(){function t(t,e,n){this.configService=t,this.el=e,this.translateService=n}return t.prototype.ngOnInit=function(){var t=this;this.configService.getConfig().i18nEnabled&&this.translateService.onLangChange.subscribe(function(){t.getTranslation()})},t.prototype.ngOnChanges=function(){this.configService.getConfig().i18nEnabled&&this.getTranslation()},t.prototype.getTranslation=function(){var e=this;this.translateService.get(this.jhiTranslate,this.translateValues).subscribe(function(t){e.el.nativeElement.innerHTML=t},function(){return e.configService.getConfig().noi18nMessage+"["+e.jhiTranslate+"]"})},t.decorators=[{type:u.Directive,args:[{selector:"[jhiTranslate]"}]}],t.ctorParameters=function(){return[{type:y},{type:u.ElementRef},{type:o.TranslateService}]},t.propDecorators={jhiTranslate:[{type:u.Input}],translateValues:[{type:u.Input}]},t}(),k=function(){function t(t){this.configService=t}return t.prototype.handle=function(t){var e=t.key;return this.configService.getConfig().noi18nMessage+"["+e+"]"},t}(),A=function(){function t(t){this.activeModal=t,this.threadDumpAll=0,this.threadDumpBlocked=0,this.threadDumpRunnable=0,this.threadDumpTimedWaiting=0,this.threadDumpWaiting=0}return t.prototype.ngOnInit=function(){var e=this;this.threadDump.forEach(function(t){"RUNNABLE"===t.threadState?e.threadDumpRunnable+=1:"WAITING"===t.threadState?e.threadDumpWaiting+=1:"TIMED_WAITING"===t.threadState?e.threadDumpTimedWaiting+=1:"BLOCKED"===t.threadState&&(e.threadDumpBlocked+=1)}),this.threadDumpAll=this.threadDumpRunnable+this.threadDumpWaiting+this.threadDumpTimedWaiting+this.threadDumpBlocked},t.prototype.getBadgeClass=function(t){return"RUNNABLE"===t?"badge-success":"WAITING"===t?"badge-info":"TIMED_WAITING"===t?"badge-warning":"BLOCKED"===t?"badge-danger":void 0},t.decorators=[{type:u.Component,args:[{selector:"jhi-thread-modal",template:'\n        <div class="modal-header">\n            <h4 class="modal-title" jhiTranslate="metrics.jvm.threads.dump.title">Threads dump</h4>\n            <button type="button" class="close" (click)="activeModal.dismiss(\'closed\')">&times;</button>\n        </div>\n        <div class="modal-body">\n            <span class="badge badge-primary" (click)="threadDumpFilter = {}">\n                All&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpAll }}</span> </span\n            >&nbsp;\n            <span class="badge badge-success" (click)="threadDumpFilter = { threadState: \'RUNNABLE\' }">\n                Runnable&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpRunnable }}</span> </span\n            >&nbsp;\n            <span class="badge badge-info" (click)="threadDumpFilter = { threadState: \'WAITING\' }"\n                >Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpWaiting }}</span></span\n            >&nbsp;\n            <span class="badge badge-warning" (click)="threadDumpFilter = { threadState: \'TIMED_WAITING\' }">\n                Timed Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpTimedWaiting }}</span> </span\n            >&nbsp;\n            <span class="badge badge-danger" (click)="threadDumpFilter = { threadState: \'BLOCKED\' }"\n                >Blocked&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpBlocked }}</span></span\n            >&nbsp;\n            <div class="mt-2">&nbsp;</div>\n            Filter\n            <input type="text" [(ngModel)]="threadDumpFilter" class="form-control" />\n            <div class="pad" *ngFor="let entry of (threadDump | pureFilter: threadDumpFilter:\'lockName\' | keys)">\n                <h6>\n                    <span class="badge" [ngClass]="getBadgeClass(entry.value.threadState)">{{ entry.value.threadState }}</span\n                    >&nbsp;{{ entry.value.threadName }}\n                    (ID\n                    {{ entry.value.threadId }})\n                    <a (click)="entry.show = !entry.show" href="javascript:void(0);">\n                        <span [hidden]="entry.show" jhiTranslate="metrics.jvm.threads.dump.show">Show StackTrace</span>\n                        <span [hidden]="!entry.show" jhiTranslate="metrics.jvm.threads.dump.hide">Hide StackTrace</span>\n                    </a>\n                </h6>\n                <div class="card" [hidden]="!entry.show">\n                    <div class="card-body">\n                        <div *ngFor="let st of (entry.value.stackTrace | keys)" class="break">\n                            <samp\n                                >{{ st.value.className }}.{{ st.value.methodName }}(<code\n                                    >{{ st.value.fileName }}:{{ st.value.lineNumber }}</code\n                                >)</samp\n                            >\n                            <span class="mt-1"></span>\n                        </div>\n                    </div>\n                </div>\n                <table class="table table-sm table-responsive">\n                    <thead>\n                        <tr>\n                            <th jhiTranslate="metrics.jvm.threads.dump.blockedtime">Blocked Time</th>\n                            <th jhiTranslate="metrics.jvm.threads.dump.blockedcount">Blocked Count</th>\n                            <th jhiTranslate="metrics.jvm.threads.dump.waitedtime">Waited Time</th>\n                            <th jhiTranslate="metrics.jvm.threads.dump.waitedcount">Waited Count</th>\n                            <th jhiTranslate="metrics.jvm.threads.dump.lockname">Lock Name</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>{{ entry.value.blockedTime }}</td>\n                            <td>{{ entry.value.blockedCount }}</td>\n                            <td>{{ entry.value.waitedTime }}</td>\n                            <td>{{ entry.value.waitedCount }}</td>\n                            <td class="thread-dump-modal-lock" title="{{ entry.value.lockName }}">\n                                <code>{{ entry.value.lockName }}</code>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n        <div class="modal-footer">\n            <button type="button" class="btn btn-secondary float-left" data-dismiss="modal" (click)="activeModal.dismiss(\'closed\')">\n                Done\n            </button>\n        </div>\n    '}]}],t.ctorParameters=function(){return[{type:i.NgbActiveModal}]},t}(),N=function(){function t(){}return t.decorators=[{type:u.Component,args:[{selector:"jhi-jvm-memory",template:'\n        <h4 jhiTranslate="metrics.jvm.memory.title">Memory</h4>\n        <div *ngIf="!updating">\n            <div *ngFor="let entry of (jvmMemoryMetrics | keys)">\n                <span *ngIf="entry.value.max != -1; else other">\n                    <span>{{ entry.key }}</span> ({{ entry.value.used / 1048576 | number: \'1.0-0\' }}M /\n                    {{ entry.value.max / 1048576 | number: \'1.0-0\' }}M)\n                </span>\n                <div>Committed : {{ entry.value.committed / 1048576 | number: \'1.0-0\' }}M</div>\n                <ng-template #other\n                    ><span\n                        ><span>{{ entry.key }}</span> {{ entry.value.used / 1048576 | number: \'1.0-0\' }}M</span\n                    >\n                </ng-template>\n                <ngb-progressbar\n                    *ngIf="entry.value.max != -1"\n                    type="success"\n                    [value]="(100 * entry.value.used) / entry.value.max"\n                    [striped]="true"\n                    [animated]="false"\n                >\n                    <span>{{ (entry.value.used * 100) / entry.value.max | number: \'1.0-0\' }}%</span>\n                </ngb-progressbar>\n            </div>\n        </div>\n    '}]}],t.propDecorators={jvmMemoryMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),O=function(){function t(t){this.modalService=t}return t.prototype.ngOnInit=function(){var e=this;this.threadStats={threadDumpRunnable:0,threadDumpWaiting:0,threadDumpTimedWaiting:0,threadDumpBlocked:0,threadDumpAll:0},this.threadData.forEach(function(t){"RUNNABLE"===t.threadState?e.threadStats.threadDumpRunnable+=1:"WAITING"===t.threadState?e.threadStats.threadDumpWaiting+=1:"TIMED_WAITING"===t.threadState?e.threadStats.threadDumpTimedWaiting+=1:"BLOCKED"===t.threadState&&(e.threadStats.threadDumpBlocked+=1)}),this.threadStats.threadDumpAll=this.threadStats.threadDumpRunnable+this.threadStats.threadDumpWaiting+this.threadStats.threadDumpTimedWaiting+this.threadStats.threadDumpBlocked},t.prototype.open=function(){this.modalService.open(A).componentInstance.threadDump=this.threadData},t.decorators=[{type:u.Component,args:[{selector:"jhi-jvm-threads",template:'\n        <h4 jhiTranslate="metrics.jvm.threads.title">Threads</h4>\n        <span><span jhiTranslate="metrics.jvm.threads.runnable">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>\n        <ngb-progressbar\n            [value]="threadStats.threadDumpRunnable"\n            [max]="threadStats.threadDumpAll"\n            [striped]="true"\n            [animated]="false"\n            type="success"\n        >\n            <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: \'1.0-0\' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate="metrics.jvm.threads.timedwaiting">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>\n        <ngb-progressbar\n            [value]="threadStats.threadDumpTimedWaiting"\n            [max]="threadStats.threadDumpAll"\n            [striped]="true"\n            [animated]="false"\n            type="warning"\n        >\n            <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: \'1.0-0\' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate="metrics.jvm.threads.waiting">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>\n        <ngb-progressbar\n            [value]="threadStats.threadDumpWaiting"\n            [max]="threadStats.threadDumpAll"\n            [striped]="true"\n            [animated]="false"\n            type="warning"\n        >\n            <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: \'1.0-0\' }}%</span>\n        </ngb-progressbar>\n        <span><span jhiTranslate="metrics.jvm.threads.blocked">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>\n        <ngb-progressbar\n            [value]="threadStats.threadDumpBlocked"\n            [max]="threadStats.threadDumpAll"\n            [striped]="true"\n            [animated]="false"\n            type="success"\n        >\n            <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: \'1.0-0\' }}%</span>\n        </ngb-progressbar>\n        <div>Total: {{ threadStats.threadDumpAll }}</div>\n        <button class="hand btn btn-primary btn-sm" (click)="open()" data-toggle="modal" data-target="#threadDump">\n            <span>Expand</span>\n        </button>\n    '}]}],t.ctorParameters=function(){return[{type:i.NgbModal}]},t.propDecorators={threadData:[{type:u.Input}]},t}(),B=function(){function t(){}return t.prototype.filterNaN=function(t){return isNaN(t)?0:t},t.decorators=[{type:u.Component,args:[{selector:"jhi-metrics-cache",template:'\n        <h3 jhiTranslate="metrics.cache.title">Cache statistics</h3>\n        <div class="table-responsive" *ngIf="!updating">\n            <table class="table table-striped">\n                <thead>\n                    <tr>\n                        <th jhiTranslate="metrics.cache.cachename">Cache name</th>\n                        <th class="text-right" data-translate="metrics.cache.hits">Cache Hits</th>\n                        <th class="text-right" data-translate="metrics.cache.misses">Cache Misses</th>\n                        <th class="text-right" data-translate="metrics.cache.gets">Cache Gets</th>\n                        <th class="text-right" data-translate="metrics.cache.puts">Cache Puts</th>\n                        <th class="text-right" data-translate="metrics.cache.removals">Cache Removals</th>\n                        <th class="text-right" data-translate="metrics.cache.evictions">Cache Evictions</th>\n                        <th class="text-right" data-translate="metrics.cache.hitPercent">Cache Hit %</th>\n                        <th class="text-right" data-translate="metrics.cache.missPercent">Cache Miss %</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor="let entry of (cacheMetrics | keys)">\n                        <td>{{ entry.key }}</td>\n                        <td class="text-right">{{ entry.value[\'cache.gets.hit\'] }}</td>\n                        <td class="text-right">{{ entry.value[\'cache.gets.miss\'] }}</td>\n                        <td class="text-right">{{ entry.value[\'cache.gets.hit\'] + entry.value[\'cache.gets.miss\'] }}</td>\n                        <td class="text-right">{{ entry.value[\'cache.puts\'] }}</td>\n                        <td class="text-right">{{ entry.value[\'cache.removals\'] }}</td>\n                        <td class="text-right">{{ entry.value[\'cache.evictions\'] }}</td>\n                        <td class="text-right">\n                            {{\n                                filterNaN(\n                                    (100 * entry.value[\'cache.gets.hit\']) / (entry.value[\'cache.gets.hit\'] + entry.value[\'cache.gets.miss\'])\n                                ) | number: \'1.0-4\'\n                            }}\n                        </td>\n                        <td class="text-right">\n                            {{\n                                filterNaN(\n                                    (100 * entry.value[\'cache.gets.miss\']) /\n                                        (entry.value[\'cache.gets.hit\'] + entry.value[\'cache.gets.miss\'])\n                                ) | number: \'1.0-4\'\n                            }}\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    '}]}],t.propDecorators={cacheMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),F=function(){function t(){}return t.prototype.filterNaN=function(t){return isNaN(t)?0:t},t.decorators=[{type:u.Component,args:[{selector:"jhi-metrics-datasource",template:'\n        <h3 jhiTranslate="metrics.datasource.title">DataSource statistics (time in millisecond)</h3>\n        <div class="table-responsive" *ngIf="!updating">\n            <table class="table table-striped">\n                <thead>\n                    <tr>\n                        <th>\n                            <span jhiTranslate="metrics.datasource.usage">Connection Pool Usage</span> (active:\n                            {{ datasourceMetrics.active.value }}, min: {{ datasourceMetrics.min.value }}, max:\n                            {{ datasourceMetrics.max.value }}, idle: {{ datasourceMetrics.idle.value }})\n                        </th>\n                        <th class="text-right" jhiTranslate="metrics.datasource.count">Count</th>\n                        <th class="text-right" jhiTranslate="metrics.datasource.mean">Mean</th>\n                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>\n                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>\n                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>\n                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>\n                        <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>\n                        <th class="text-right" jhiTranslate="metrics.datasource.max">Max</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>Acquire</td>\n                        <td class="text-right">{{ datasourceMetrics.acquire.count }}</td>\n                        <td class="text-right">{{ filterNaN(datasourceMetrics.acquire.mean) | number: \'1.0-2\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.acquire[\'0.0\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.acquire[\'0.5\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.acquire[\'0.75\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.acquire[\'0.95\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.acquire[\'0.99\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ filterNaN(datasourceMetrics.acquire.max) | number: \'1.0-2\' }}</td>\n                    </tr>\n                    <tr>\n                        <td>Creation</td>\n                        <td class="text-right">{{ datasourceMetrics.creation.count }}</td>\n                        <td class="text-right">{{ filterNaN(datasourceMetrics.creation.mean) | number: \'1.0-2\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.creation[\'0.0\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.creation[\'0.5\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.creation[\'0.75\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.creation[\'0.95\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.creation[\'0.99\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ filterNaN(datasourceMetrics.creation.max) | number: \'1.0-2\' }}</td>\n                    </tr>\n                    <tr>\n                        <td>Usage</td>\n                        <td class="text-right">{{ datasourceMetrics.usage.count }}</td>\n                        <td class="text-right">{{ filterNaN(datasourceMetrics.usage.mean) | number: \'1.0-2\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.usage[\'0.0\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.usage[\'0.5\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.usage[\'0.75\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.usage[\'0.95\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ datasourceMetrics.usage[\'0.99\'] | number: \'1.0-3\' }}</td>\n                        <td class="text-right">{{ filterNaN(datasourceMetrics.usage.max) | number: \'1.0-2\' }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    '}]}],t.propDecorators={datasourceMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),L=function(){function t(){}return t.decorators=[{type:u.Component,args:[{selector:"jhi-metrics-endpoints-requests",template:'\n        <h3>Endpoints requests (time in millisecond)</h3>\n        <div class="table-responsive" *ngIf="!updating">\n            <table class="table table-striped">\n                <thead>\n                    <tr>\n                        <th>Method</th>\n                        <th>Endpoint url</th>\n                        <th class="text-right">Count</th>\n                        <th class="text-right">Mean</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <ng-container *ngFor="let entry of (endpointsRequestsMetrics | keys)">\n                        <tr *ngFor="let method of (entry.value | keys)">\n                            <td>{{ method.key }}</td>\n                            <td>{{ entry.key }}</td>\n                            <td class="text-right">{{ method.value.count }}</td>\n                            <td class="text-right">{{ method.value.mean | number: \'1.0-3\' }}</td>\n                        </tr>\n                    </ng-container>\n                </tbody>\n            </table>\n        </div>\n    '}]}],t.propDecorators={endpointsRequestsMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),E=function(){function t(){}return t.decorators=[{type:u.Component,args:[{selector:"jhi-metrics-garbagecollector",template:'\n        <div class="row">\n            <div class="col-md-4">\n                <div *ngIf="garbageCollectorMetrics">\n                    <span>\n                        GC Live Data Size/GC Max Data Size ({{\n                            garbageCollectorMetrics[\'jvm.gc.live.data.size\'] / 1048576 | number: \'1.0-0\'\n                        }}M / {{ garbageCollectorMetrics[\'jvm.gc.max.data.size\'] / 1048576 | number: \'1.0-0\' }}M)</span\n                    >\n                    <ngb-progressbar\n                        [max]="garbageCollectorMetrics[\'jvm.gc.max.data.size\']"\n                        [value]="garbageCollectorMetrics[\'jvm.gc.live.data.size\']"\n                        [striped]="true"\n                        [animated]="false"\n                        type="success"\n                    >\n                        <span\n                            >{{\n                                (100 * garbageCollectorMetrics[\'jvm.gc.live.data.size\']) / garbageCollectorMetrics[\'jvm.gc.max.data.size\']\n                                    | number: \'1.0-2\'\n                            }}%</span\n                        >\n                    </ngb-progressbar>\n                </div>\n            </div>\n            <div class="col-md-4">\n                <div *ngIf="garbageCollectorMetrics">\n                    <span>\n                        GC Memory Promoted/GC Memory Allocated ({{\n                            garbageCollectorMetrics[\'jvm.gc.memory.promoted\'] / 1048576 | number: \'1.0-0\'\n                        }}M / {{ garbageCollectorMetrics[\'jvm.gc.memory.allocated\'] / 1048576 | number: \'1.0-0\' }}M)</span\n                    >\n                    <ngb-progressbar\n                        [max]="garbageCollectorMetrics[\'jvm.gc.memory.allocated\']"\n                        [value]="garbageCollectorMetrics[\'jvm.gc.memory.promoted\']"\n                        [striped]="true"\n                        [animated]="false"\n                        type="success"\n                    >\n                        <span\n                            >{{\n                                (100 * garbageCollectorMetrics[\'jvm.gc.memory.promoted\']) /\n                                    garbageCollectorMetrics[\'jvm.gc.memory.allocated\'] | number: \'1.0-2\'\n                            }}%</span\n                        >\n                    </ngb-progressbar>\n                </div>\n            </div>\n            <div class="col-md-4">\n                <div class="row" *ngIf="garbageCollectorMetrics">\n                    <div class="col-md-9">Classes loaded</div>\n                    <div class="col-md-3 text-right">{{ garbageCollectorMetrics.classesLoaded }}</div>\n                </div>\n                <div class="row" *ngIf="garbageCollectorMetrics">\n                    <div class="col-md-9">Classes unloaded</div>\n                    <div class="col-md-3 text-right">{{ garbageCollectorMetrics.classesUnloaded }}</div>\n                </div>\n            </div>\n            <div class="table-responsive" *ngIf="!updating && garbageCollectorMetrics">\n                <table class="table table-striped">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.count">Count</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.mean">Mean</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.min">Min</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p50">p50</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p75">p75</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p95">p95</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.p99">p99</th>\n                            <th class="text-right" jhiTranslate="metrics.servicesstats.table.max">Max</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>jvm.gc.pause</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'].count }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'].mean | number: \'1.0-3\' }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'][\'0.0\'] | number: \'1.0-3\' }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'][\'0.5\'] | number: \'1.0-3\' }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'][\'0.75\'] | number: \'1.0-3\' }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'][\'0.95\'] | number: \'1.0-3\' }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'][\'0.99\'] | number: \'1.0-3\' }}</td>\n                            <td class="text-right">{{ garbageCollectorMetrics[\'jvm.gc.pause\'].max | number: \'1.0-3\' }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    '}]}],t.propDecorators={garbageCollectorMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),W=function(){function t(){}return t.prototype.filterNaN=function(t){return isNaN(t)?0:t},t.decorators=[{type:u.Component,args:[{selector:"jhi-metrics-request",template:'\n        <h3 jhiTranslate="metrics.jvm.http.title">HTTP requests (time in millisecond)</h3>\n        <table class="table table-striped" *ngIf="!updating">\n            <thead>\n                <tr>\n                    <th jhiTranslate="metrics.jvm.http.table.code">Code</th>\n                    <th jhiTranslate="metrics.jvm.http.table.count">Count</th>\n                    <th class="text-right" jhiTranslate="metrics.jvm.http.table.mean">Mean</th>\n                    <th class="text-right" jhiTranslate="metrics.jvm.http.table.max">Max</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr *ngFor="let entry of (requestMetrics[\'percode\'] | keys)">\n                    <td>{{ entry.key }}</td>\n                    <td>\n                        <ngb-progressbar\n                            [max]="requestMetrics[\'all\'].count"\n                            [value]="entry.value.count"\n                            [striped]="true"\n                            [animated]="false"\n                            type="success"\n                        >\n                            <span>{{ entry.value.count }}</span>\n                        </ngb-progressbar>\n                    </td>\n                    <td class="text-right">\n                        {{ filterNaN(entry.value.mean) | number: \'1.0-2\' }}\n                    </td>\n                    <td class="text-right">{{ entry.value.max | number: \'1.0-2\' }}</td>\n                </tr>\n            </tbody>\n        </table>\n    '}]}],t.propDecorators={requestMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),R=function(){function t(){}return t.prototype.convertMillisecondsToDuration=function(t){var e={year:315576e5,month:2629746e3,day:864e5,hour:36e5,minute:6e4,second:1e3},n="";for(var r in e)if(0<Math.floor(t/e[r])){var a="";1<Math.floor(t/e[r])&&(a="s"),n+=Math.floor(t/e[r]).toString()+" "+r.toString()+a+" ",t-=e[r]*Math.floor(t/e[r])}return n},t.decorators=[{type:u.Component,args:[{selector:"jhi-metrics-system",template:'\n        <h4>System</h4>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-4">Uptime</div>\n            <div class="col-md-8 text-right">{{ convertMillisecondsToDuration(systemMetrics[\'process.uptime\']) }}</div>\n        </div>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-4">Start time</div>\n            <div class="col-md-8 text-right">{{ systemMetrics[\'process.start.time\'] | date: \'full\' }}</div>\n        </div>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-9">Process CPU usage</div>\n            <div class="col-md-3 text-right">{{ 100 * systemMetrics[\'process.cpu.usage\'] | number: \'1.0-2\' }} %</div>\n        </div>\n        <ngb-progressbar\n            [value]="100 * systemMetrics[\'process.cpu.usage\']"\n            [striped]="true"\n            [animated]="false"\n            type="success"\n            *ngIf="!updating"\n        >\n            <span>{{ 100 * systemMetrics[\'process.cpu.usage\'] | number: \'1.0-2\' }} %</span>\n        </ngb-progressbar>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-9">System CPU usage</div>\n            <div class="col-md-3 text-right">{{ 100 * systemMetrics[\'system.cpu.usage\'] | number: \'1.0-2\' }} %</div>\n        </div>\n        <ngb-progressbar\n            [value]="100 * systemMetrics[\'system.cpu.usage\']"\n            [striped]="true"\n            [animated]="false"\n            type="success"\n            *ngIf="!updating"\n        >\n            <span>{{ 100 * systemMetrics[\'system.cpu.usage\'] | number: \'1.0-2\' }} %</span>\n        </ngb-progressbar>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-9">System CPU count</div>\n            <div class="col-md-3 text-right">{{ systemMetrics[\'system.cpu.count\'] }}</div>\n        </div>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-9">System 1m Load average</div>\n            <div class="col-md-3 text-right">{{ systemMetrics[\'system.load.average.1m\'] | number: \'1.0-2\' }}</div>\n        </div>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-9">Process files max</div>\n            <div class="col-md-3 text-right">{{ systemMetrics[\'process.files.max\'] | number: \'1.0-0\' }}</div>\n        </div>\n        <div class="row" *ngIf="!updating">\n            <div class="col-md-9">Process files open</div>\n            <div class="col-md-3 text-right">{{ systemMetrics[\'process.files.open\'] | number: \'1.0-0\' }}</div>\n        </div>\n    '}]}],t.propDecorators={systemMetrics:[{type:u.Input}],updating:[{type:u.Input}]},t}(),q=function(){function t(){}return t.prototype.transform=function(t){return null!==t&&(t=t.toLowerCase()),t.substring(0,1).toUpperCase()+t.substring(1)},t.decorators=[{type:u.Pipe,args:[{name:"capitalize"}]}],t}(),J=function(){function t(){}return t.prototype.transform=function(t,e,n){if(!e)return t;var r=typeof e;return"string"===r?n?t.filter(this.filterByStringAndField(e,n)):t.filter(this.filterByString(e)):"object"===r?t.filter(this.filterByObject(e)):void 0},t.prototype.filterByStringAndField=function(e,n){return function(t){return!e||t[n]&&-1!==t[n].toLowerCase().indexOf(e.toLowerCase())}},t.prototype.filterByString=function(e){return function(t){return!e||-1!==t.toLowerCase().indexOf(e.toLowerCase())}},t.prototype.filterDefault=function(e){return function(t){return!e||e===t}},t.prototype.filterByObject=function(l){var d=this;return function(t){var e,n,r=Object.keys(l);try{for(var a=g(r),s=a.next();!s.done;s=a.next()){var i=s.value,o=typeof t[i];if(!("string"===o?d.filterByString(l[i])(t[i]):"object"===o?d.filterByObject(l[i])(t[i]):d.filterDefault(l[i])(t[i])))return!1}}catch(c){e={error:c}}finally{try{s&&!s.done&&(n=a["return"])&&n.call(a)}finally{if(e)throw e.error}}return!0}},t.decorators=[{type:u.Pipe,args:[{name:"filter",pure:!1}]}],t}(),U=function(){function t(){}return t.prototype.transform=function(t){var e,n,r=[],a=Object.keys(t);try{for(var s=g(a),i=s.next();!i.done;i=s.next()){var o=i.value;r.push({key:o,value:t[o]})}}catch(c){e={error:c}}finally{try{i&&!i.done&&(n=s["return"])&&n.call(s)}finally{if(e)throw e.error}}return r},t.decorators=[{type:u.Pipe,args:[{name:"keys"}]}],t}(),_=function(){function t(){}return t.prototype.transform=function(t,n,r){return void 0===n&&(n=""),void 0===r&&(r=!1),""===n?r?t.sort().reverse():t.sort():t.sort(function(t,e){return t[n]<e[n]?r?1:-1:e[n]<t[n]?r?-1:1:0})},t.decorators=[{type:u.Pipe,args:[{name:"orderBy"}]}],t}(),z=function(r){function t(){return null!==r&&r.apply(this,arguments)||this}return function a(t,e){function n(){this.constructor=t}p(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(t,r),t.prototype.transform=function(t,e,n){return r.prototype.transform.call(this,t,e,n)},t.decorators=[{type:u.Pipe,args:[{name:"pureFilter"}]}],t}(J),G=function(){function t(){}return t.prototype.transform=function(t,e,n){if(isNaN(e))return t;if(e<=0)return"";if(t&&t.length>e){if(t=t.substring(0,e),n)for(;" "===t.charAt(t.length-1);)t=t.substr(0,t.length-1);else{var r=t.lastIndexOf(" ");-1!==r&&(t=t.substr(0,r))}return t+"..."}return t},t.decorators=[{type:u.Pipe,args:[{name:"truncateCharacters"}]}],t}(),V=function(){function t(){}return t.prototype.transform=function(t,e){if(isNaN(e))return t;if(e<=0)return"";if(t){var n=t.split(/\s+/);n.length>e&&(t=n.slice(0,e).join(" ")+"...")}return t},t.decorators=[{type:u.Pipe,args:[{name:"truncateWords"}]}],t}(),H=[q,J,U,_,z,G,V],K=[S,D,x,M,C,T],Z=[b,j,N,O,W,L,B,F,R,E,A],$=function(){function t(t,e,n){this.sanitizer=t,this.configService=e,this.translateService=n;var r=this.configService.getConfig();this.toast=r.alertAsToast,this.i18nEnabled=r.i18nEnabled,this.alertId=0,this.alerts=[],this.timeout=r.alertTimeout}return t.prototype.clear=function(){this.alerts.splice(0,this.alerts.length)},t.prototype.get=function(){return this.alerts},t.prototype.success=function(t,e,n){return this.addAlert({type:"success",msg:t,params:e,timeout:this.timeout,toast:this.isToast(),position:n},[])},t.prototype.error=function(t,e,n){return this.addAlert({type:"danger",msg:t,params:e,timeout:this.timeout,toast:this.isToast(),position:n},[])},t.prototype.warning=function(t,e,n){return this.addAlert({type:"warning",msg:t,params:e,timeout:this.timeout,toast:this.isToast(),position:n},[])},t.prototype.info=function(t,e,n){return this.addAlert({type:"info",msg:t,params:e,timeout:this.timeout,toast:this.isToast(),position:n},[])},t.prototype.addAlert=function(t,e){var n=this;t.id=this.alertId++,this.i18nEnabled&&t.msg&&(t.msg=this.translateService.instant(t.msg,t.params));var r=this.factory(t);return t.timeout&&0<t.timeout&&setTimeout(function(){n.closeAlert(t.id,e)},t.timeout),r},t.prototype.closeAlert=function(t,e){var n=e&&0<e.length?e:this.alerts;return this.closeAlertByIndex(n.map(function(t){return t.id}).indexOf(t),n)},t.prototype.closeAlertByIndex=function(t,e){return e.splice(t,1)},t.prototype.isToast=function(){return this.toast},t.prototype.factory=function(e){var n=this,t={type:e.type,msg:this.sanitizer.sanitize(u.SecurityContext.HTML,e.msg),id:e.id,timeout:e.timeout,toast:e.toast,position:e.position?e.position:"top right",scoped:e.scoped,close:function(t){return n.closeAlert(e.id,t)}};return t.scoped||this.alerts.push(t),t},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:u.Sanitizer},{type:y},{type:o.TranslateService}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(u.Sanitizer),u.inject(y),u.inject(o.TranslateService))},token:t,providedIn:"root"}),t}(),Q=function(){function t(){}return t.prototype.parseAscending=function(t){var e=t.split(",");return!(1<(e=1<e.length?e:t.split("%2C")).length)||"asc"===e.slice(-1)[0]},t.prototype.parsePage=function(t){return parseInt(t,10)},t.prototype.parsePredicate=function(t){return t.split(",")[0].split("%2C")[0]},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),X=function(){function t(t){this.paginationUtil=t}return t.prototype.resolve=function(t,e){var n=t.queryParams.page?t.queryParams.page:"1",r=t.data.defaultSort?t.data.defaultSort:"id,asc",a=t.queryParams.sort?t.queryParams.sort:r;return{page:this.paginationUtil.parsePage(n),predicate:this.paginationUtil.parsePredicate(a),ascending:this.paginationUtil.parseAscending(a)}},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:Q}]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t(u.inject(Q))},token:t,providedIn:"root"}),t}();function Y(t){return new s.TranslateHttpLoader(t,"i18n/",".json?buildTimestamp="+process.env.BUILD_TIMESTAMP)}function tt(t){return new k(t)}var et=function(){function e(){}return e.forRoot=function(t){return{ngModule:e,providers:[{provide:w,useClass:w,deps:[o.TranslateService,y]},{provide:X,useClass:X,deps:[Q]},{provide:$,useClass:$,deps:[u.Sanitizer,y,o.TranslateService]},{provide:v,useValue:t},{provide:y,useClass:y,deps:[v]}]}},e.forChild=function(t){return{ngModule:e,providers:[{provide:v,useValue:t}]}},e.decorators=[{type:u.NgModule,args:[{imports:[c.CommonModule,o.TranslateModule.forRoot({loader:{provide:o.TranslateLoader,useFactory:Y,deps:[r.HttpClient]},missingTranslationHandler:{provide:o.MissingTranslationHandler,useFactory:tt,deps:[y]}}),c.CommonModule,i.NgbModule.forRoot(),a.FormsModule],declarations:f(H,K,Z,[P]),entryComponents:[A],exports:f(H,K,Z,[P,o.TranslateModule,c.CommonModule])}]}],e}(),nt=function(){function t(){}return t.prototype.parse=function(t){if(0===t.length)throw new Error("input must not be of zero length");var e=t.split(","),i={};return e.forEach(function(t){var e=t.split(";");if(2!==e.length)throw new Error('section could not be split on ";"');var n=e[0].replace(/<(.*)>/,"$1").trim(),a={};n.replace(new RegExp("([^?=&]+)(=([^&]*))?","g"),function(t,e,n,r){return a[e]=r});var r=a.page;"string"==typeof r&&(r=parseInt(r,10));var s=e[1].replace(/rel="(.*)"/,"$1").trim();i[s]=r}),i},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),rt=function(){function t(){}return t.prototype.abbreviate=function(t,e){return void 0===e&&(e="..."),t.length<30?t:t?t.substring(0,15)+e+t.slice(-10):""},t.prototype.byteSize=function(t){return this.formatAsBytes(this.size(t))},t.prototype.openFile=function(t,e){if(window.navigator&&window.navigator.msSaveOrOpenBlob){for(var n=atob(e),r=new Array(n.length),a=0;a<n.length;a++)r[a]=n.charCodeAt(a);var s=new Uint8Array(r),i=new Blob([s],{type:t});window.navigator.msSaveOrOpenBlob(i)}else{var o="data:"+t+";base64,"+e;window.open().document.write('<iframe src="'+o+'" frameborder="0" style="border:0; top:0; left:0; bottom:0; right:0; width:100%; height:100%;" allowfullscreen></iframe>')}},t.prototype.toBase64=function(t,n){var e=new FileReader;e.onload=function(t){var e=t.target.result.substr(t.target.result.indexOf("base64,")+"base64,".length);n(e)},e.readAsDataURL(t)},t.prototype.clearInputImage=function(t,e,n,r,a){t&&n&&r&&(t.hasOwnProperty(n)&&(t[n]=null),t.hasOwnProperty(r)&&(t[r]=null),e&&a&&e.nativeElement.querySelector("#"+a)&&(e.nativeElement.querySelector("#"+a).value=null))},t.prototype.setFileData=function(r,a,s,i){var o=this;return new Promise(function(e,t){if(r&&r.target&&r.target.files&&r.target.files[0]){var n=r.target.files[0];i&&!/^image\//.test(n.type)?t("File was expected to be an image but was found to be "+n.type):o.toBase64(n,function(t){a[s]=t,a[s+"ContentType"]=n.type,e(a)})}else t("Base64 data was not set as file could not be extracted from passed parameter: "+r)})},t.prototype.downloadFile=function(t,e,n){for(var r=atob(e),a=new Array(r.length),s=0;s<r.length;s++)a[s]=r.charCodeAt(s);var i=new Uint8Array(a),o=new Blob([i],{type:t}),c=document.createElement("a");c.href=window.URL.createObjectURL(o),c.download=n,c.target="_blank",c.click()},t.prototype.endsWith=function(t,e){return-1!==e.indexOf(t,e.length-t.length)},t.prototype.paddingSize=function(t){return this.endsWith("==",t)?2:this.endsWith("=",t)?1:0},t.prototype.size=function(t){return t.length/4*3-this.paddingSize(t)},t.prototype.formatAsBytes=function(t){return t.toString().replace(/\B(?=(\d{3})+(?!\d))/g," ")+" bytes"},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),at=function(){function t(){this.pattern="yyyy-MM-dd",this.datePipe=new c.DatePipe("en")}return t.prototype.convertDateTimeFromServer=function(t){return t?new Date(t):null},t.prototype.convertLocalDateFromServer=function(t){if(t){var e=t.split("-");return new Date(e[0],e[1]-1,e[2])}return null},t.prototype.convertLocalDateToServer=function(t,e){if(void 0===e&&(e=this.pattern),t){var n=new Date(t.year,t.month-1,t.day);return this.datePipe.transform(n,e)}return null},t.prototype.dateformat=function(){return this.pattern},t.prototype.toDate=function(t){if(t===undefined||null===t)return null;var e=t.split(/\D+/);return 7===e.length?new Date(e[0],e[1]-1,e[2],e[3],e[4],e[5],e[6]):6===e.length?new Date(e[0],e[1]-1,e[2],e[3],e[4],e[5]):new Date(e[0],e[1]-1,e[2],e[3],e[4])},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),st=function(){function t(){var e=this;this.observable=l.Observable.create(function(t){e.observer=t}).pipe(d.share())}return t.prototype.broadcast=function(t){null!=this.observer&&this.observer.next(t)},t.prototype.subscribe=function(e,t){return this.observable.pipe(d.filter(function(t){return t.name===e})).subscribe(t)},t.prototype.destroy=function(t){t.unsubscribe()},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[]},t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}(),it=function(){function t(){this.keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}return t.prototype.encode=function(t){for(var e="",n="",r="",a="",s="",i="",o="",c="",l=0;l<t.length;)n=(i=t.charCodeAt(l++))>>2,r=(3&i)<<4|(o=t.charCodeAt(l++))>>4,a=(15&o)<<2|(c=t.charCodeAt(l++))>>6,s=63&c,isNaN(o)?a=s=64:isNaN(c)&&(s=64),e=e+this.keyStr.charAt(n)+this.keyStr.charAt(r)+this.keyStr.charAt(a)+this.keyStr.charAt(s),i=o=c="",n=r=a=s="";return e},t.prototype.decode=function(t){var e="",n="",r="",a="",s="",i="",o="",c=0;for(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"");c<t.length;)s=this.keyStr.indexOf(t.charAt(c++))<<2|(n=this.keyStr.indexOf(t.charAt(c++)))>>4,i=(15&n)<<4|(r=this.keyStr.indexOf(t.charAt(c++)))>>2,o=(3&r)<<6|(a=this.keyStr.indexOf(t.charAt(c++))),e+=String.fromCharCode(s),64!==r&&(e+=String.fromCharCode(i)),64!==a&&(e+=String.fromCharCode(o)),s=i=o="",n=r=a="";return e},t.decorators=[{type:u.Injectable,args:[{providedIn:"root"}]}],t.ngInjectableDef=u.defineInjectable({factory:function(){return new t},token:t,providedIn:"root"}),t}();t.JhiModuleConfig=v,t.missingTranslationHandler=tt,t.NgJhipsterModule=et,t.translatePartialLoader=Y,t.JhiItemCountComponent=b,t.JhiBooleanComponent=j,t.JhiConfigService=y,t.JhiMaxbytesValidatorDirective=x,t.JhiMinbytesValidatorDirective=M,t.JhiMaxValidatorDirective=S,t.JhiMinValidatorDirective=D,t.JhiSortDirective=C,t.JhiSortByDirective=T,t.JhiLanguageService=w,t.JhiTranslateDirective=P,t.JhiMissingTranslationHandler=k,t.JhiTruncateCharactersPipe=G,t.JhiTruncateWordsPipe=V,t.JhiOrderByPipe=_,t.JhiFilterPipe=J,t.JhiPureFilterPipe=z,t.JhiCapitalizePipe=q,t.JhiKeysPipe=U,t.JhiPaginationUtil=Q,t.JhiParseLinks=nt,t.JhiDataUtils=rt,t.JhiDateUtils=at,t.JhiEventManager=st,t.JhiAlertService=$,t.JhiBase64Service=it,t.JhiResolvePagingParams=X,t.ɵd=N,t.ɵe=O,t.ɵh=B,t.ɵi=F,t.ɵg=L,t.ɵk=E,t.ɵl=A,t.ɵf=W,t.ɵj=R,t.ɵc=Z,t.ɵb=K,t.ɵa=H,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ng-jhipster.umd.min.js.map