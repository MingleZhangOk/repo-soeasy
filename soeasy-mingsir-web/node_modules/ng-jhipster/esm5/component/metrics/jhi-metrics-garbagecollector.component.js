/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Component, Input } from '@angular/core';
var JhiMetricsGarbageCollectorComponent = /** @class */ (function () {
    function JhiMetricsGarbageCollectorComponent() {
    }
    JhiMetricsGarbageCollectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'jhi-metrics-garbagecollector',
                    template: "\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <div *ngIf=\"garbageCollectorMetrics\">\n                    <span>\n                        GC Live Data Size/GC Max Data Size ({{\n                            garbageCollectorMetrics['jvm.gc.live.data.size'] / 1048576 | number: '1.0-0'\n                        }}M / {{ garbageCollectorMetrics['jvm.gc.max.data.size'] / 1048576 | number: '1.0-0' }}M)</span\n                    >\n                    <ngb-progressbar\n                        [max]=\"garbageCollectorMetrics['jvm.gc.max.data.size']\"\n                        [value]=\"garbageCollectorMetrics['jvm.gc.live.data.size']\"\n                        [striped]=\"true\"\n                        [animated]=\"false\"\n                        type=\"success\"\n                    >\n                        <span\n                            >{{\n                                (100 * garbageCollectorMetrics['jvm.gc.live.data.size']) / garbageCollectorMetrics['jvm.gc.max.data.size']\n                                    | number: '1.0-2'\n                            }}%</span\n                        >\n                    </ngb-progressbar>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div *ngIf=\"garbageCollectorMetrics\">\n                    <span>\n                        GC Memory Promoted/GC Memory Allocated ({{\n                            garbageCollectorMetrics['jvm.gc.memory.promoted'] / 1048576 | number: '1.0-0'\n                        }}M / {{ garbageCollectorMetrics['jvm.gc.memory.allocated'] / 1048576 | number: '1.0-0' }}M)</span\n                    >\n                    <ngb-progressbar\n                        [max]=\"garbageCollectorMetrics['jvm.gc.memory.allocated']\"\n                        [value]=\"garbageCollectorMetrics['jvm.gc.memory.promoted']\"\n                        [striped]=\"true\"\n                        [animated]=\"false\"\n                        type=\"success\"\n                    >\n                        <span\n                            >{{\n                                (100 * garbageCollectorMetrics['jvm.gc.memory.promoted']) /\n                                    garbageCollectorMetrics['jvm.gc.memory.allocated'] | number: '1.0-2'\n                            }}%</span\n                        >\n                    </ngb-progressbar>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\n                    <div class=\"col-md-9\">Classes loaded</div>\n                    <div class=\"col-md-3 text-right\">{{ garbageCollectorMetrics.classesLoaded }}</div>\n                </div>\n                <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\n                    <div class=\"col-md-9\">Classes unloaded</div>\n                    <div class=\"col-md-3 text-right\">{{ garbageCollectorMetrics.classesUnloaded }}</div>\n                </div>\n            </div>\n            <div class=\"table-responsive\" *ngIf=\"!updating && garbageCollectorMetrics\">\n                <table class=\"table table-striped\">\n                    <thead>\n                        <tr>\n                            <th></th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.count\">Count</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.mean\">Mean</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.min\">Min</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p50\">p50</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p75\">p75</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p95\">p95</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.p99\">p99</th>\n                            <th class=\"text-right\" jhiTranslate=\"metrics.servicesstats.table.max\">Max</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>jvm.gc.pause</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause'].count }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause'].mean | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.0'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.5'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.75'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.95'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.99'] | number: '1.0-3' }}</td>\n                            <td class=\"text-right\">{{ garbageCollectorMetrics['jvm.gc.pause'].max | number: '1.0-3' }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    "
                }] }
    ];
    JhiMetricsGarbageCollectorComponent.propDecorators = {
        garbageCollectorMetrics: [{ type: Input }],
        updating: [{ type: Input }]
    };
    return JhiMetricsGarbageCollectorComponent;
}());
export { JhiMetricsGarbageCollectorComponent };
if (false) {
    /**
     * object containing garbage collector related metrics
     * @type {?}
     */
    JhiMetricsGarbageCollectorComponent.prototype.garbageCollectorMetrics;
    /**
     * boolean field saying if the metrics are in the process of being updated
     * @type {?}
     */
    JhiMetricsGarbageCollectorComponent.prototype.updating;
}
//# sourceMappingURL=data:application/json;base64,