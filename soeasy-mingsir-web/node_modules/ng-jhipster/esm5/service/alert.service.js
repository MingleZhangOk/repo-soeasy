/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Injectable, Sanitizer, SecurityContext } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { JhiConfigService } from '../config.service';
import * as i0 from "@angular/core";
import * as i1 from "../config.service";
import * as i2 from "@ngx-translate/core";
/**
 * @record
 */
export function JhiAlert() { }
if (false) {
    /** @type {?|undefined} */
    JhiAlert.prototype.id;
    /** @type {?} */
    JhiAlert.prototype.type;
    /** @type {?} */
    JhiAlert.prototype.msg;
    /** @type {?|undefined} */
    JhiAlert.prototype.params;
    /** @type {?|undefined} */
    JhiAlert.prototype.timeout;
    /** @type {?|undefined} */
    JhiAlert.prototype.toast;
    /** @type {?|undefined} */
    JhiAlert.prototype.position;
    /** @type {?|undefined} */
    JhiAlert.prototype.scoped;
    /** @type {?|undefined} */
    JhiAlert.prototype.close;
}
var JhiAlertService = /** @class */ (function () {
    function JhiAlertService(sanitizer, configService, translateService) {
        this.sanitizer = sanitizer;
        this.configService = configService;
        this.translateService = translateService;
        /** @type {?} */
        var config = this.configService.getConfig();
        this.toast = config.alertAsToast;
        this.i18nEnabled = config.i18nEnabled;
        this.alertId = 0; // unique id for each alert. Starts from 0.
        this.alerts = [];
        this.timeout = config.alertTimeout;
    }
    /**
     * @return {?}
     */
    JhiAlertService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.alerts.splice(0, this.alerts.length);
    };
    /**
     * @return {?}
     */
    JhiAlertService.prototype.get = /**
     * @return {?}
     */
    function () {
        return this.alerts;
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.success = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'success',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.error = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'danger',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.warning = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'warning',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    JhiAlertService.prototype.info = /**
     * @param {?} msg
     * @param {?=} params
     * @param {?=} position
     * @return {?}
     */
    function (msg, params, position) {
        return this.addAlert({
            type: 'info',
            msg: msg,
            params: params,
            timeout: this.timeout,
            toast: this.isToast(),
            position: position
        }, []);
    };
    /**
     * @param {?} alertOptions
     * @param {?} extAlerts
     * @return {?}
     */
    JhiAlertService.prototype.addAlert = /**
     * @param {?} alertOptions
     * @param {?} extAlerts
     * @return {?}
     */
    function (alertOptions, extAlerts) {
        var _this = this;
        alertOptions.id = this.alertId++;
        if (this.i18nEnabled && alertOptions.msg) {
            alertOptions.msg = this.translateService.instant(alertOptions.msg, alertOptions.params);
        }
        /** @type {?} */
        var alert = this.factory(alertOptions);
        if (alertOptions.timeout && alertOptions.timeout > 0) {
            setTimeout(function () {
                _this.closeAlert(alertOptions.id, extAlerts);
            }, alertOptions.timeout);
        }
        return alert;
    };
    /**
     * @param {?} id
     * @param {?=} extAlerts
     * @return {?}
     */
    JhiAlertService.prototype.closeAlert = /**
     * @param {?} id
     * @param {?=} extAlerts
     * @return {?}
     */
    function (id, extAlerts) {
        /** @type {?} */
        var thisAlerts = extAlerts && extAlerts.length > 0 ? extAlerts : this.alerts;
        return this.closeAlertByIndex(thisAlerts.map(function (e) { return e.id; }).indexOf(id), thisAlerts);
    };
    /**
     * @param {?} index
     * @param {?} thisAlerts
     * @return {?}
     */
    JhiAlertService.prototype.closeAlertByIndex = /**
     * @param {?} index
     * @param {?} thisAlerts
     * @return {?}
     */
    function (index, thisAlerts) {
        return thisAlerts.splice(index, 1);
    };
    /**
     * @return {?}
     */
    JhiAlertService.prototype.isToast = /**
     * @return {?}
     */
    function () {
        return this.toast;
    };
    /**
     * @private
     * @param {?} alertOptions
     * @return {?}
     */
    JhiAlertService.prototype.factory = /**
     * @private
     * @param {?} alertOptions
     * @return {?}
     */
    function (alertOptions) {
        var _this = this;
        /** @type {?} */
        var alert = {
            type: alertOptions.type,
            msg: this.sanitizer.sanitize(SecurityContext.HTML, alertOptions.msg),
            id: alertOptions.id,
            timeout: alertOptions.timeout,
            toast: alertOptions.toast,
            position: alertOptions.position ? alertOptions.position : 'top right',
            scoped: alertOptions.scoped,
            close: function (alerts) {
                return _this.closeAlert(alertOptions.id, alerts);
            }
        };
        if (!alert.scoped) {
            this.alerts.push(alert);
        }
        return alert;
    };
    JhiAlertService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    JhiAlertService.ctorParameters = function () { return [
        { type: Sanitizer },
        { type: JhiConfigService },
        { type: TranslateService }
    ]; };
    /** @nocollapse */ JhiAlertService.ngInjectableDef = i0.defineInjectable({ factory: function JhiAlertService_Factory() { return new JhiAlertService(i0.inject(i0.Sanitizer), i0.inject(i1.JhiConfigService), i0.inject(i2.TranslateService)); }, token: JhiAlertService, providedIn: "root" });
    return JhiAlertService;
}());
export { JhiAlertService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.alertId;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.alerts;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.timeout;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.toast;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.i18nEnabled;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.configService;
    /**
     * @type {?}
     * @private
     */
    JhiAlertService.prototype.translateService;
}
//# sourceMappingURL=data:application/json;base64,