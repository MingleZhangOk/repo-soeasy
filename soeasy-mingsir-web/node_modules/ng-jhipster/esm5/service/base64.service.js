/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
/* tslint:disable:no-bitwise */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var JhiBase64Service = /** @class */ (function () {
    function JhiBase64Service() {
        this.keyStr = 'ABCDEFGHIJKLMNOP' + 'QRSTUVWXYZabcdef' + 'ghijklmnopqrstuv' + 'wxyz0123456789+/' + '=';
    }
    /**
     * @param {?} input
     * @return {?}
     */
    JhiBase64Service.prototype.encode = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var output = '';
        /** @type {?} */
        var enc1 = '';
        /** @type {?} */
        var enc2 = '';
        /** @type {?} */
        var enc3 = '';
        /** @type {?} */
        var enc4 = '';
        /** @type {?} */
        var chr1 = '';
        /** @type {?} */
        var chr2 = '';
        /** @type {?} */
        var chr3 = '';
        /** @type {?} */
        var i = 0;
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            }
            else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output + this.keyStr.charAt(enc1) + this.keyStr.charAt(enc2) + this.keyStr.charAt(enc3) + this.keyStr.charAt(enc4);
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    };
    /**
     * @param {?} input
     * @return {?}
     */
    JhiBase64Service.prototype.decode = /**
     * @param {?} input
     * @return {?}
     */
    function (input) {
        /** @type {?} */
        var output = '';
        /** @type {?} */
        var enc1 = '';
        /** @type {?} */
        var enc2 = '';
        /** @type {?} */
        var enc3 = '';
        /** @type {?} */
        var enc4 = '';
        /** @type {?} */
        var chr1 = '';
        /** @type {?} */
        var chr2 = '';
        /** @type {?} */
        var chr3 = '';
        /** @type {?} */
        var i = 0;
        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
        while (i < input.length) {
            enc1 = this.keyStr.indexOf(input.charAt(i++));
            enc2 = this.keyStr.indexOf(input.charAt(i++));
            enc3 = this.keyStr.indexOf(input.charAt(i++));
            enc4 = this.keyStr.indexOf(input.charAt(i++));
            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;
            output = output + String.fromCharCode(chr1);
            if (enc3 !== 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 !== 64) {
                output = output + String.fromCharCode(chr3);
            }
            chr1 = chr2 = chr3 = '';
            enc1 = enc2 = enc3 = enc4 = '';
        }
        return output;
    };
    JhiBase64Service.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */ JhiBase64Service.ngInjectableDef = i0.defineInjectable({ factory: function JhiBase64Service_Factory() { return new JhiBase64Service(); }, token: JhiBase64Service, providedIn: "root" });
    return JhiBase64Service;
}());
export { JhiBase64Service };
if (false) {
    /**
     * @type {?}
     * @private
     */
    JhiBase64Service.prototype.keyStr;
}
//# sourceMappingURL=data:application/json;base64,