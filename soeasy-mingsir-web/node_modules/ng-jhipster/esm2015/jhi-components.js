/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { JhiBooleanComponent } from './component/jhi-boolean.component';
import { JhiItemCountComponent } from './component/jhi-item-count.component';
import { JhiJvmMemoryComponent } from './component/metrics/jhi-jvm-memory.component';
import { JhiJvmThreadsComponent } from './component/metrics/jhi-jvm-threads.component';
import { JhiMetricsCacheComponent } from './component/metrics/jhi-metrics-cache.component';
import { JhiMetricsDatasourceComponent } from './component/metrics/jhi-metrics-datasource.component';
import { JhiMetricsEndpointsRequestsComponent } from './component/metrics/jhi-metrics-endpoints-requests';
import { JhiMetricsGarbageCollectorComponent } from './component/metrics/jhi-metrics-garbagecollector.component';
import { JhiThreadModalComponent } from './component/metrics/jhi-metrics-modal-threads.component';
import { JhiMetricsHttpRequestComponent } from './component/metrics/jhi-metrics-request.component';
import { JhiMetricsSystemComponent } from './component/metrics/jhi-metrics-system.component';
import { JhiMaxValidatorDirective } from './directive/max.directive';
import { JhiMaxbytesValidatorDirective } from './directive/maxbytes.directive';
import { JhiMinValidatorDirective } from './directive/min.directive';
import { JhiMinbytesValidatorDirective } from './directive/minbytes.directive';
import { JhiSortByDirective } from './directive/sort-by.directive';
import { JhiSortDirective } from './directive/sort.directive';
import { JhiCapitalizePipe } from './pipe/capitalize.pipe';
import { JhiFilterPipe } from './pipe/filter.pipe';
import { JhiKeysPipe } from './pipe/keys.pipe';
import { JhiOrderByPipe } from './pipe/order-by.pipe';
import { JhiPureFilterPipe } from './pipe/pure-filter.pipe';
import { JhiTruncateCharactersPipe } from './pipe/truncate-characters.pipe';
import { JhiTruncateWordsPipe } from './pipe/truncate-words.pipe';
/** @type {?} */
export const JHI_PIPES = [
    JhiCapitalizePipe,
    JhiFilterPipe,
    JhiKeysPipe,
    JhiOrderByPipe,
    JhiPureFilterPipe,
    JhiTruncateCharactersPipe,
    JhiTruncateWordsPipe
];
/** @type {?} */
export const JHI_DIRECTIVES = [
    JhiMaxValidatorDirective,
    JhiMinValidatorDirective,
    JhiMaxbytesValidatorDirective,
    JhiMinbytesValidatorDirective,
    JhiSortDirective,
    JhiSortByDirective
];
/** @type {?} */
export const JHI_COMPONENTS = [
    JhiItemCountComponent,
    JhiBooleanComponent,
    JhiJvmMemoryComponent,
    JhiJvmThreadsComponent,
    JhiMetricsHttpRequestComponent,
    JhiMetricsEndpointsRequestsComponent,
    JhiMetricsCacheComponent,
    JhiMetricsDatasourceComponent,
    JhiMetricsSystemComponent,
    JhiMetricsGarbageCollectorComponent,
    JhiThreadModalComponent
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiamhpLWNvbXBvbmVudHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1qaGlwc3Rlci8iLCJzb3VyY2VzIjpbImpoaS1jb21wb25lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDeEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDckYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0saURBQWlELENBQUM7QUFDM0YsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDckcsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDMUcsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDakgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFDbEcsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDbkcsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDN0YsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDckUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDckUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7O0FBRWxFLE1BQU0sT0FBTyxTQUFTLEdBQUc7SUFDckIsaUJBQWlCO0lBQ2pCLGFBQWE7SUFDYixXQUFXO0lBQ1gsY0FBYztJQUNkLGlCQUFpQjtJQUNqQix5QkFBeUI7SUFDekIsb0JBQW9CO0NBQ3ZCOztBQUVELE1BQU0sT0FBTyxjQUFjLEdBQUc7SUFDMUIsd0JBQXdCO0lBQ3hCLHdCQUF3QjtJQUN4Qiw2QkFBNkI7SUFDN0IsNkJBQTZCO0lBQzdCLGdCQUFnQjtJQUNoQixrQkFBa0I7Q0FDckI7O0FBRUQsTUFBTSxPQUFPLGNBQWMsR0FBRztJQUMxQixxQkFBcUI7SUFDckIsbUJBQW1CO0lBQ25CLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsOEJBQThCO0lBQzlCLG9DQUFvQztJQUNwQyx3QkFBd0I7SUFDeEIsNkJBQTZCO0lBQzdCLHlCQUF5QjtJQUN6QixtQ0FBbUM7SUFDbkMsdUJBQXVCO0NBQzFCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgMjAxMy0yMDE5IHRoZSBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyBmcm9tIHRoZSBKSGlwc3RlciBwcm9qZWN0LlxuXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEpIaXBzdGVyIHByb2plY3QsIHNlZSBodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL1xuIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBKaGlCb29sZWFuQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvamhpLWJvb2xlYW4uY29tcG9uZW50JztcbmltcG9ydCB7IEpoaUl0ZW1Db3VudENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L2poaS1pdGVtLWNvdW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBKaGlKdm1NZW1vcnlDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9tZXRyaWNzL2poaS1qdm0tbWVtb3J5LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBKaGlKdm1UaHJlYWRzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvbWV0cmljcy9qaGktanZtLXRocmVhZHMuY29tcG9uZW50JztcbmltcG9ydCB7IEpoaU1ldHJpY3NDYWNoZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L21ldHJpY3MvamhpLW1ldHJpY3MtY2FjaGUuY29tcG9uZW50JztcbmltcG9ydCB7IEpoaU1ldHJpY3NEYXRhc291cmNlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQvbWV0cmljcy9qaGktbWV0cmljcy1kYXRhc291cmNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBKaGlNZXRyaWNzRW5kcG9pbnRzUmVxdWVzdHNDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9tZXRyaWNzL2poaS1tZXRyaWNzLWVuZHBvaW50cy1yZXF1ZXN0cyc7XG5pbXBvcnQgeyBKaGlNZXRyaWNzR2FyYmFnZUNvbGxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L21ldHJpY3MvamhpLW1ldHJpY3MtZ2FyYmFnZWNvbGxlY3Rvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgSmhpVGhyZWFkTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudC9tZXRyaWNzL2poaS1tZXRyaWNzLW1vZGFsLXRocmVhZHMuY29tcG9uZW50JztcbmltcG9ydCB7IEpoaU1ldHJpY3NIdHRwUmVxdWVzdENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L21ldHJpY3MvamhpLW1ldHJpY3MtcmVxdWVzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSmhpTWV0cmljc1N5c3RlbUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50L21ldHJpY3MvamhpLW1ldHJpY3Mtc3lzdGVtLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBKaGlNYXhWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZS9tYXguZGlyZWN0aXZlJztcbmltcG9ydCB7IEpoaU1heGJ5dGVzVmFsaWRhdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUvbWF4Ynl0ZXMuZGlyZWN0aXZlJztcbmltcG9ydCB7IEpoaU1pblZhbGlkYXRvckRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlL21pbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSmhpTWluYnl0ZXNWYWxpZGF0b3JEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZS9taW5ieXRlcy5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSmhpU29ydEJ5RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmUvc29ydC1ieS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSmhpU29ydERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlL3NvcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7IEpoaUNhcGl0YWxpemVQaXBlIH0gZnJvbSAnLi9waXBlL2NhcGl0YWxpemUucGlwZSc7XG5pbXBvcnQgeyBKaGlGaWx0ZXJQaXBlIH0gZnJvbSAnLi9waXBlL2ZpbHRlci5waXBlJztcbmltcG9ydCB7IEpoaUtleXNQaXBlIH0gZnJvbSAnLi9waXBlL2tleXMucGlwZSc7XG5pbXBvcnQgeyBKaGlPcmRlckJ5UGlwZSB9IGZyb20gJy4vcGlwZS9vcmRlci1ieS5waXBlJztcbmltcG9ydCB7IEpoaVB1cmVGaWx0ZXJQaXBlIH0gZnJvbSAnLi9waXBlL3B1cmUtZmlsdGVyLnBpcGUnO1xuaW1wb3J0IHsgSmhpVHJ1bmNhdGVDaGFyYWN0ZXJzUGlwZSB9IGZyb20gJy4vcGlwZS90cnVuY2F0ZS1jaGFyYWN0ZXJzLnBpcGUnO1xuaW1wb3J0IHsgSmhpVHJ1bmNhdGVXb3Jkc1BpcGUgfSBmcm9tICcuL3BpcGUvdHJ1bmNhdGUtd29yZHMucGlwZSc7XG5cbmV4cG9ydCBjb25zdCBKSElfUElQRVMgPSBbXG4gICAgSmhpQ2FwaXRhbGl6ZVBpcGUsXG4gICAgSmhpRmlsdGVyUGlwZSxcbiAgICBKaGlLZXlzUGlwZSxcbiAgICBKaGlPcmRlckJ5UGlwZSxcbiAgICBKaGlQdXJlRmlsdGVyUGlwZSxcbiAgICBKaGlUcnVuY2F0ZUNoYXJhY3RlcnNQaXBlLFxuICAgIEpoaVRydW5jYXRlV29yZHNQaXBlXG5dO1xuXG5leHBvcnQgY29uc3QgSkhJX0RJUkVDVElWRVMgPSBbXG4gICAgSmhpTWF4VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIEpoaU1pblZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBKaGlNYXhieXRlc1ZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBKaGlNaW5ieXRlc1ZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBKaGlTb3J0RGlyZWN0aXZlLFxuICAgIEpoaVNvcnRCeURpcmVjdGl2ZVxuXTtcblxuZXhwb3J0IGNvbnN0IEpISV9DT01QT05FTlRTID0gW1xuICAgIEpoaUl0ZW1Db3VudENvbXBvbmVudCxcbiAgICBKaGlCb29sZWFuQ29tcG9uZW50LFxuICAgIEpoaUp2bU1lbW9yeUNvbXBvbmVudCxcbiAgICBKaGlKdm1UaHJlYWRzQ29tcG9uZW50LFxuICAgIEpoaU1ldHJpY3NIdHRwUmVxdWVzdENvbXBvbmVudCxcbiAgICBKaGlNZXRyaWNzRW5kcG9pbnRzUmVxdWVzdHNDb21wb25lbnQsXG4gICAgSmhpTWV0cmljc0NhY2hlQ29tcG9uZW50LFxuICAgIEpoaU1ldHJpY3NEYXRhc291cmNlQ29tcG9uZW50LFxuICAgIEpoaU1ldHJpY3NTeXN0ZW1Db21wb25lbnQsXG4gICAgSmhpTWV0cmljc0dhcmJhZ2VDb2xsZWN0b3JDb21wb25lbnQsXG4gICAgSmhpVGhyZWFkTW9kYWxDb21wb25lbnRcbl07XG4iXX0=