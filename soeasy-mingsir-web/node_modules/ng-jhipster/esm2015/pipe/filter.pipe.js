/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
import { Pipe } from '@angular/core';
export class JhiFilterPipe {
    /**
     * @param {?} input
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    transform(input, filter, field) {
        if (!filter) {
            return input;
        }
        /** @type {?} */
        const type = typeof filter;
        if (type === 'string') {
            if (field) {
                return input.filter(this.filterByStringAndField(filter, field));
            }
            return input.filter(this.filterByString(filter));
        }
        if (type === 'object') {
            return input.filter(this.filterByObject(filter));
        }
    }
    /**
     * @private
     * @param {?} filter
     * @param {?} field
     * @return {?}
     */
    filterByStringAndField(filter, field) {
        return value => {
            return !filter || (value[field] && value[field].toLowerCase().indexOf(filter.toLowerCase()) !== -1);
        };
    }
    // adapted from https://github.com/VadimDez/ng2-filter-pipe
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    filterByString(filter) {
        return value => {
            return !filter || value.toLowerCase().indexOf(filter.toLowerCase()) !== -1;
        };
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    filterDefault(filter) {
        return value => {
            return !filter || filter === value;
        };
    }
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    filterByObject(filter) {
        return value => {
            /** @type {?} */
            const keys = Object.keys(filter);
            for (const key of keys) {
                /** @type {?} */
                const type = typeof value[key];
                /** @type {?} */
                let isMatching;
                if (type === 'string') {
                    isMatching = this.filterByString(filter[key])(value[key]);
                }
                else if (type === 'object') {
                    isMatching = this.filterByObject(filter[key])(value[key]);
                }
                else {
                    isMatching = this.filterDefault(filter[key])(value[key]);
                }
                if (!isMatching) {
                    return false;
                }
            }
            return true;
        };
    }
}
JhiFilterPipe.decorators = [
    { type: Pipe, args: [{ name: 'filter', pure: false },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1qaGlwc3Rlci8iLCJzb3VyY2VzIjpbInBpcGUvZmlsdGVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUdwRCxNQUFNLE9BQU8sYUFBYTs7Ozs7OztJQUN0QixTQUFTLENBQUMsS0FBWSxFQUFFLE1BQWMsRUFBRSxLQUFhO1FBQ2pELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPLEtBQUssQ0FBQztTQUNoQjs7Y0FDSyxJQUFJLEdBQUcsT0FBTyxNQUFNO1FBQzFCLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNuQixJQUFJLEtBQUssRUFBRTtnQkFDUCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQ25FO1lBQ0QsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUNuQixPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0wsQ0FBQzs7Ozs7OztJQUNPLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxLQUFLO1FBQ3hDLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDWCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RyxDQUFDLENBQUM7SUFDTixDQUFDOzs7Ozs7O0lBR08sY0FBYyxDQUFDLE1BQU07UUFDekIsT0FBTyxLQUFLLENBQUMsRUFBRTtZQUNYLE9BQU8sQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMvRSxDQUFDLENBQUM7SUFDTixDQUFDOzs7Ozs7SUFFTyxhQUFhLENBQUMsTUFBTTtRQUN4QixPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQ1gsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLEtBQUssS0FBSyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQztJQUNOLENBQUM7Ozs7OztJQUVPLGNBQWMsQ0FBQyxNQUFNO1FBQ3pCLE9BQU8sS0FBSyxDQUFDLEVBQUU7O2tCQUNMLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNoQyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTs7c0JBQ2QsSUFBSSxHQUFHLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQzs7b0JBQzFCLFVBQVU7Z0JBRWQsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUNuQixVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDN0Q7cUJBQU0sSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO29CQUMxQixVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDN0Q7cUJBQU07b0JBQ0gsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQzVEO2dCQUVELElBQUksQ0FBQyxVQUFVLEVBQUU7b0JBQ2IsT0FBTyxLQUFLLENBQUM7aUJBQ2hCO2FBQ0o7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUM7SUFDTixDQUFDOzs7WUEzREosSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiBDb3B5cmlnaHQgMjAxMy0yMDE5IHRoZSBvcmlnaW5hbCBhdXRob3Igb3IgYXV0aG9ycyBmcm9tIHRoZSBKSGlwc3RlciBwcm9qZWN0LlxuXG4gVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIEpIaXBzdGVyIHByb2plY3QsIHNlZSBodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL1xuIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBQaXBlKHsgbmFtZTogJ2ZpbHRlcicsIHB1cmU6IGZhbHNlIH0pXG5leHBvcnQgY2xhc3MgSmhpRmlsdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHRyYW5zZm9ybShpbnB1dDogYW55W10sIGZpbHRlcjogc3RyaW5nLCBmaWVsZDogc3RyaW5nKTogYW55IHtcbiAgICAgICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0eXBlID0gdHlwZW9mIGZpbHRlcjtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQuZmlsdGVyKHRoaXMuZmlsdGVyQnlTdHJpbmdBbmRGaWVsZChmaWx0ZXIsIGZpZWxkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuZmlsdGVyKHRoaXMuZmlsdGVyQnlTdHJpbmcoZmlsdGVyKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5maWx0ZXIodGhpcy5maWx0ZXJCeU9iamVjdChmaWx0ZXIpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGZpbHRlckJ5U3RyaW5nQW5kRmllbGQoZmlsdGVyLCBmaWVsZCkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFmaWx0ZXIgfHwgKHZhbHVlW2ZpZWxkXSAmJiB2YWx1ZVtmaWVsZF0udG9Mb3dlckNhc2UoKS5pbmRleE9mKGZpbHRlci50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vVmFkaW1EZXovbmcyLWZpbHRlci1waXBlXG4gICAgcHJpdmF0ZSBmaWx0ZXJCeVN0cmluZyhmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhZmlsdGVyIHx8IHZhbHVlLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihmaWx0ZXIudG9Mb3dlckNhc2UoKSkgIT09IC0xO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZmlsdGVyRGVmYXVsdChmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAhZmlsdGVyIHx8IGZpbHRlciA9PT0gdmFsdWU7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWx0ZXJCeU9iamVjdChmaWx0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhmaWx0ZXIpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgdmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICBsZXQgaXNNYXRjaGluZztcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICBpc01hdGNoaW5nID0gdGhpcy5maWx0ZXJCeVN0cmluZyhmaWx0ZXJba2V5XSkodmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICBpc01hdGNoaW5nID0gdGhpcy5maWx0ZXJCeU9iamVjdChmaWx0ZXJba2V5XSkodmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXNNYXRjaGluZyA9IHRoaXMuZmlsdGVyRGVmYXVsdChmaWx0ZXJba2V5XSkodmFsdWVba2V5XSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFpc01hdGNoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==