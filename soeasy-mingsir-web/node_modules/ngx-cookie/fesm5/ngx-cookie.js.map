{"version":3,"file":"ngx-cookie.js.map","sources":["ng://ngx-cookie/lib/utils.ts","ng://ngx-cookie/lib/cookie-options-provider.ts","ng://ngx-cookie/lib/cookie.service.ts","ng://ngx-cookie/lib/cookie-backend.service.ts","ng://ngx-cookie/lib/cookie.factory.ts","ng://ngx-cookie/lib/cookie.module.ts"],"sourcesContent":["import { CookieOptions } from './cookie-options.model';\n\nexport function isBlank(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\nexport function isPresent(obj: any): boolean {\n  return obj !== undefined && obj !== null;\n}\n\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded,\n  };\n}\n\nexport function safeDecodeURIComponent(str: string) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nexport function safeJsonParse(str: string) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { Inject, Injectable, InjectionToken, Injector } from '@angular/core';\nimport { APP_BASE_HREF } from '@angular/common';\n\nimport { CookieOptions } from './cookie-options.model';\nimport { mergeOptions } from './utils';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  private defaultOptions: CookieOptions;\n  private _options: CookieOptions;\n\n  constructor(\n    @Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n    private _injector: Injector\n  ) {\n    this.defaultOptions = {\n      path: this._injector.get(APP_BASE_HREF, '/'),\n      domain: null,\n      expires: null,\n      secure: false,\n      httpOnly: false\n    };\n    this._options = mergeOptions(this.defaultOptions, options);\n  }\n\n  get options(): CookieOptions {\n    return this._options;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { CookieOptionsProvider } from './cookie-options-provider';\nimport { CookieOptions } from './cookie-options.model';\nimport { isBlank, isString, mergeOptions, safeDecodeURIComponent, safeJsonParse } from './utils';\n\ndeclare interface Document {\n  cookie: string;\n}\ndeclare const document: Document;\n\nexport interface ICookieService {\n  get(key: string): string;\n  getObject(key: string): Object;\n  getAll(): Object;\n  put(key: string, value: string, options?: CookieOptions): void;\n  putObject(key: string, value: Object, options?: CookieOptions): void;\n  remove(key: string, options?: CookieOptions): void;\n  removeAll(options?: CookieOptions): void;\n}\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  protected get cookieString(): string {\n    return document.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    document.cookie = val;\n  }\n\n  constructor(private _optionsProvider: CookieOptionsProvider) {\n    this.options = this._optionsProvider.options;\n  }\n\n  /**\n   * @name CookieService#get\n   *\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return (<any>this._cookieReader())[key];\n  }\n\n  /**\n   * @name CookieService#getObject\n   *\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): Object {\n    const value = this.get(key);\n    return value ? safeJsonParse(value) : value;\n  }\n\n  /**\n   * @name CookieService#getAll\n   *\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): Object {\n    return <any>this._cookieReader();\n  }\n\n  /**\n   * @name CookieService#put\n   *\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string, options?: CookieOptions) {\n    this._cookieWriter()(key, value, options);\n  }\n\n  /**\n   * @name CookieService#putObject\n   *\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: Object, options?: CookieOptions) {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @name CookieService#remove\n   *\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this._cookieWriter()(key, undefined, options);\n  }\n\n  /**\n   * @name CookieService#removeAll\n   *\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => {\n      this.remove(key, options);\n    });\n  }\n\n  private _cookieReader(): Object {\n    let lastCookies = {};\n    let lastCookieString = '';\n    let cookieArray: string[], cookie: string, i: number, index: number, name: string;\n    const currentCookieString = this.cookieString;\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split('; ');\n      lastCookies = {};\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf('=');\n        if (index > 0) {  // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isBlank((<any>lastCookies)[name])) {\n            (<any>lastCookies)[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  private _cookieWriter() {\n    const that = this;\n\n    return function (name: string, value: string, options?: CookieOptions) {\n      that.cookieString = that._buildCookieString(name, value, options);\n    };\n  }\n\n  private _buildCookieString(name: string, value: string, options?: CookieOptions): string {\n    const opts: CookieOptions = mergeOptions(this.options, options);\n    let expires: any = opts.expires;\n    if (isBlank(value)) {\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n      value = '';\n    }\n    if (isString(expires)) {\n      expires = new Date(expires);\n    }\n    const cookieValue = opts.storeUnencoded ? value : encodeURIComponent(value);\n    let str = encodeURIComponent(name) + '=' + cookieValue;\n    str += opts.path ? ';path=' + opts.path : '';\n    str += opts.domain ? ';domain=' + opts.domain : '';\n    str += expires ? ';expires=' + expires.toUTCString() : '';\n    str += opts.secure ? ';secure' : '';\n    str += opts.httpOnly ? '; HttpOnly' : '';\n\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n    // - 300 cookies\n    // - 20 cookies per unique domain\n    // - 4096 bytes per cookie\n    const cookieLength = str.length + 1;\n    if (cookieLength > 4096) {\n      console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\n    }\n    return str;\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\n\nimport { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\n@Injectable()\nexport class CookieBackendService extends CookieService {\n\n  constructor(\n    @Inject('REQUEST') private request: any,\n    @Inject('RESPONSE') private response: any,\n    _optionsProvider: CookieOptionsProvider\n  ) {\n    super(_optionsProvider);\n  }\n\n  protected get cookieString(): string {\n    return this.request.headers.cookie || '';\n  }\n\n  protected set cookieString(val: string) {\n    this.request.headers.cookie = val;\n    this.response.headers.cookie = val;\n  }\n}\n","import { CookieService } from './cookie.service';\nimport { CookieOptionsProvider } from './cookie-options-provider';\n\nexport function cookieServiceFactory(cookieOptionsProvider: CookieOptionsProvider): CookieService {\n  return new CookieService(cookieOptionsProvider);\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CookieOptionsProvider, COOKIE_OPTIONS } from './cookie-options-provider';\nimport { CookieService } from './cookie.service';\nimport { CookieOptions } from './cookie-options.model';\nimport { cookieServiceFactory } from './cookie.factory';\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [CookieOptionsProvider]}\n      ]\n    };\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
