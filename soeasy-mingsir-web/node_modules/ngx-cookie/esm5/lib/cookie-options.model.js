/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@name CookieOptionsArgs
 * \@description
 *
 * Object containing default options to pass when setting cookies.
 *
 * The object may have following properties:
 *
 * - **path** - {string} - The cookie will be available only for this path and its
 *   sub-paths. By default, this is the URL that appears in your `<base>` tag.
 * - **domain** - {string} - The cookie will be available only for this domain and
 *   its sub-domains. For security reasons the user agent will not accept the cookie
 *   if the current domain is not a sub-domain of this domain or equal to it.
 * - **expires** - {string|Date} - String of the form "Wdy, DD Mon YYYY HH:MM:SS GMT"
 *   or a Date object indicating the exact date/time this cookie will expire.
 * - **secure** - {boolean} - If `true`, then the cookie will only be available through a
 *   secured connection.
 * - **httpOnly** - {boolean} - If `true`, then the cookie will be set with the `HttpOnly`
 *   flag, and will only be accessible from the remote server. Helps to prevent against
 *   XSS attacks.
 * - **storeUnencoded** - {boolean} - If `true`, then the cookie value will not be encoded and
 *   will be stored as provided.
 * @record
 */
export function CookieOptions() { }
function CookieOptions_tsickle_Closure_declarations() {
    /** @type {?|undefined} */
    CookieOptions.prototype.path;
    /** @type {?|undefined} */
    CookieOptions.prototype.domain;
    /** @type {?|undefined} */
    CookieOptions.prototype.expires;
    /** @type {?|undefined} */
    CookieOptions.prototype.secure;
    /** @type {?|undefined} */
    CookieOptions.prototype.httpOnly;
    /** @type {?|undefined} */
    CookieOptions.prototype.storeUnencoded;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29va2llLW9wdGlvbnMubW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY29va2llLyIsInNvdXJjZXMiOlsibGliL2Nvb2tpZS1vcHRpb25zLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuYW1lIENvb2tpZU9wdGlvbnNBcmdzXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPYmplY3QgY29udGFpbmluZyBkZWZhdWx0IG9wdGlvbnMgdG8gcGFzcyB3aGVuIHNldHRpbmcgY29va2llcy5cbiAqXG4gKiBUaGUgb2JqZWN0IG1heSBoYXZlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqIC0gKipwYXRoKiogLSB7c3RyaW5nfSAtIFRoZSBjb29raWUgd2lsbCBiZSBhdmFpbGFibGUgb25seSBmb3IgdGhpcyBwYXRoIGFuZCBpdHNcbiAqICAgc3ViLXBhdGhzLiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSBVUkwgdGhhdCBhcHBlYXJzIGluIHlvdXIgYDxiYXNlPmAgdGFnLlxuICogLSAqKmRvbWFpbioqIC0ge3N0cmluZ30gLSBUaGUgY29va2llIHdpbGwgYmUgYXZhaWxhYmxlIG9ubHkgZm9yIHRoaXMgZG9tYWluIGFuZFxuICogICBpdHMgc3ViLWRvbWFpbnMuIEZvciBzZWN1cml0eSByZWFzb25zIHRoZSB1c2VyIGFnZW50IHdpbGwgbm90IGFjY2VwdCB0aGUgY29va2llXG4gKiAgIGlmIHRoZSBjdXJyZW50IGRvbWFpbiBpcyBub3QgYSBzdWItZG9tYWluIG9mIHRoaXMgZG9tYWluIG9yIGVxdWFsIHRvIGl0LlxuICogLSAqKmV4cGlyZXMqKiAtIHtzdHJpbmd8RGF0ZX0gLSBTdHJpbmcgb2YgdGhlIGZvcm0gXCJXZHksIEREIE1vbiBZWVlZIEhIOk1NOlNTIEdNVFwiXG4gKiAgIG9yIGEgRGF0ZSBvYmplY3QgaW5kaWNhdGluZyB0aGUgZXhhY3QgZGF0ZS90aW1lIHRoaXMgY29va2llIHdpbGwgZXhwaXJlLlxuICogLSAqKnNlY3VyZSoqIC0ge2Jvb2xlYW59IC0gSWYgYHRydWVgLCB0aGVuIHRoZSBjb29raWUgd2lsbCBvbmx5IGJlIGF2YWlsYWJsZSB0aHJvdWdoIGFcbiAqICAgc2VjdXJlZCBjb25uZWN0aW9uLlxuICogLSAqKmh0dHBPbmx5KiogLSB7Ym9vbGVhbn0gLSBJZiBgdHJ1ZWAsIHRoZW4gdGhlIGNvb2tpZSB3aWxsIGJlIHNldCB3aXRoIHRoZSBgSHR0cE9ubHlgXG4gKiAgIGZsYWcsIGFuZCB3aWxsIG9ubHkgYmUgYWNjZXNzaWJsZSBmcm9tIHRoZSByZW1vdGUgc2VydmVyLiBIZWxwcyB0byBwcmV2ZW50IGFnYWluc3RcbiAqICAgWFNTIGF0dGFja3MuXG4gKiAtICoqc3RvcmVVbmVuY29kZWQqKiAtIHtib29sZWFufSAtIElmIGB0cnVlYCwgdGhlbiB0aGUgY29va2llIHZhbHVlIHdpbGwgbm90IGJlIGVuY29kZWQgYW5kXG4gKiAgIHdpbGwgYmUgc3RvcmVkIGFzIHByb3ZpZGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvb2tpZU9wdGlvbnMge1xuICBwYXRoPzogc3RyaW5nO1xuICBkb21haW4/OiBzdHJpbmc7XG4gIGV4cGlyZXM/OiBzdHJpbmd8RGF0ZTtcbiAgc2VjdXJlPzogYm9vbGVhbjtcbiAgaHR0cE9ubHk/OiBib29sZWFuO1xuICBzdG9yZVVuZW5jb2RlZD86IGJvb2xlYW47XG59XG4iXX0=